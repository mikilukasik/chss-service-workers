/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/aiClient.ts":
/*!*************************!*\
  !*** ./src/aiClient.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helpers_asciiSpinner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/asciiSpinner.js */ \"./src/helpers/asciiSpinner.js\");\n/* harmony import */ var _aiClient_workers_createWorkers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aiClient/workers/createWorkers */ \"./src/aiClient/workers/createWorkers.js\");\n/* harmony import */ var _chss_module_engine_src_engine_new_utils_wasmEngine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chss-module-engine/src/engine_new/utils/wasmEngine.js */ \"../chss-module-engine/src/engine_new/utils/wasmEngine.js\");\n/* harmony import */ var _chss_module_engine_src_engine_new_evaluators_evaluateBoard_new_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chss-module-engine/src/engine_new/evaluators/evaluateBoard_new.js */ \"../chss-module-engine/src/engine_new/evaluators/evaluateBoard_new.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\n(0,_chss_module_engine_src_engine_new_utils_wasmEngine_js__WEBPACK_IMPORTED_MODULE_2__.getWasmEngine)()\n    .then(function (we) {\n    console.log('amottan', { we: we });\n    // @ts-expect-error we\n    window.top.we = we;\n    // @ts-expect-error we\n    window.top.evaluateBoard = _chss_module_engine_src_engine_new_evaluators_evaluateBoard_new_js__WEBPACK_IMPORTED_MODULE_3__.evaluateBoard;\n})\n    .catch(function (e) {\n    console.error('itten', e);\n});\nsetInterval(function () {\n    var indicator = document.getElementById('indicator');\n    indicator.innerHTML = (0,_helpers_asciiSpinner_js__WEBPACK_IMPORTED_MODULE_0__.getNextSpinnerChar)(indicator.innerHTML || '|');\n}, 50);\nvar workers = {\n    mainWorker: (0,_aiClient_workers_createWorkers__WEBPACK_IMPORTED_MODULE_1__.createWorker)(),\n};\nObject.values(workers).forEach(function (worker) {\n    worker.onmessage = function (_a) {\n        var rawData = _a.data;\n        return __awaiter(void 0, void 0, void 0, function () {\n            var error, response, id;\n            return __generator(this, function (_b) {\n                try {\n                    error = rawData.error, response = rawData.response, id = rawData.id;\n                    if (!responseAwaiters[id] || (!error && !response))\n                        return [2 /*return*/];\n                    if (error) {\n                        responseAwaiters[id].reject(error);\n                        delete responseAwaiters[id];\n                        return [2 /*return*/];\n                    }\n                    responseAwaiters[id].resolve(response);\n                    delete responseAwaiters[id];\n                }\n                catch (e) {\n                    console.warn(e, { rawData: rawData });\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n});\nvar responseAwaiters = {};\nvar toWorker = function (topData, id) {\n    return new Promise(function (resolve, reject) {\n        var _a = topData, workerName = _a.workerName, cmd = _a.cmd, data = _a.data;\n        if (!workers[workerName])\n            throw new Error(\"Could not find \".concat(workerName, \" worker\"));\n        responseAwaiters[id] = { resolve: resolve, reject: reject };\n        workers[workerName].postMessage({ cmd: cmd, data: data, id: id });\n    });\n};\nvar methods = { toWorker: toWorker };\nwindow.addEventListener('message', function (_a) {\n    var rawData = _a.data;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var cmd, data, id, response, error_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    cmd = rawData.cmd, data = rawData.data, id = rawData.id;\n                    if (!methods[cmd])\n                        return [2 /*return*/];\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, methods[cmd](data, id)];\n                case 2:\n                    response = _b.sent();\n                    window.top.postMessage({ id: id, response: response }, '*');\n                    return [3 /*break*/, 4];\n                case 3:\n                    error_1 = _b.sent();\n                    window.top.postMessage({ id: id, error: error_1 }, '*');\n                    return [3 /*break*/, 4];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}, false);\n\n\n//# sourceURL=webpack://chss-service-workers/./src/aiClient.ts?");

/***/ }),

/***/ "../chss-module-engine/build/optimized.wasm":
/*!**************************************************!*\
  !*** ../chss-module-engine/build/optimized.wasm ***!
  \**************************************************/
/***/ ((module) => {

eval("var buffer = new ArrayBuffer(27677);var uint8 = new Uint8Array(buffer);uint8.set([0,97,115,109,1,0,0,0,1,104,16,96,3,127,127,127,1,127,96,2,127,127,1,127,96,1,127,0,96,1,127,1,127,96,3,127,127,127,0,96,0,0,96,4,127,127,127,127,0,96,2,127,127,0,96,0,1,127,96,4,127,127,127,127,1,127,96,6,127,127,127,127,127,127,1,127,96,2,127,125,1,127,96,5,127,127,125,125,125,1,127,96,5,127,127,127,127,127,0,96,6,127,127,127,127,127,127,0,96,2,127,127,1,125,2,13,1,3,101,110,118,5,97,98,111,114,116,0,6,3,91,90,5,2,2,7,7,4,5,2,8,1,1,1,0,1,6,4,1,0,4,1,1,1,1,13,9,14,4,3,4,0,0,15,3,2,5,2,2,2,5,10,3,1,1,11,9,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,0,3,8,4,12,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,3,1,0,11,12,2,4,4,5,1,112,1,18,18,5,3,1,0,1,6,74,14,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,0,65,3,11,127,0,65,144,31,11,127,1,65,164,160,1,11,7,226,3,30,13,85,105,110,116,56,65,114,114,97,121,95,73,68,3,11,8,116,121,112,101,84,101,115,116,0,62,5,95,95,110,101,119,0,12,5,95,95,112,105,110,0,33,7,95,95,117,110,112,105,110,0,34,9,95,95,99,111,108,108,101,99,116,0,35,11,95,95,114,116,116,105,95,98,97,115,101,3,12,6,109,101,109,111,114,121,2,0,20,95,95,115,101,116,65,114,103,117,109,101,110,116,115,76,101,110,103,116,104,0,38,13,103,101,116,77,111,118,101,100,66,111,97,114,100,0,68,12,103,101,116,80,97,119,110,77,111,118,101,115,0,69,26,103,101,116,80,97,119,110,72,105,116,77,111,118,101,115,78,111,80,114,111,109,111,116,105,111,110,0,70,14,103,101,116,75,110,105,103,104,116,77,111,118,101,115,0,71,17,103,101,116,75,110,105,103,104,116,72,105,116,77,111,118,101,115,0,72,12,103,101,116,75,105,110,103,77,111,118,101,115,0,73,15,103,101,116,75,105,110,103,72,105,116,77,111,118,101,115,0,74,13,103,101,116,81,117,101,101,110,77,111,118,101,115,0,75,16,103,101,116,81,117,101,101,110,72,105,116,77,111,118,101,115,0,76,14,103,101,116,66,105,115,104,111,112,77,111,118,101,115,0,77,17,103,101,116,66,105,115,104,111,112,72,105,116,77,111,118,101,115,0,78,12,103,101,116,82,111,111,107,77,111,118,101,115,0,79,15,103,101,116,82,111,111,107,72,105,116,77,111,118,101,115,0,80,10,105,115,67,97,112,116,117,114,101,100,0,81,19,103,101,110,101,114,97,116,101,80,115,101,117,100,111,77,111,118,101,115,0,82,5,112,101,114,102,116,0,83,18,103,101,110,101,114,97,116,101,76,101,103,97,108,77,111,118,101,115,0,84,22,103,101,116,72,105,116,77,111,118,101,115,78,111,80,114,111,109,111,116,105,111,110,0,85,17,103,101,116,68,101,102,101,110,100,101,114,86,97,108,117,101,115,0,86,13,101,118,97,108,117,97,116,101,66,111,97,114,100,0,87,7,109,105,110,105,109,97,120,0,88,8,1,39,9,23,1,0,65,1,11,17,13,46,47,48,49,50,30,18,53,54,55,56,57,31,23,23,40,12,1,115,10,236,193,1,90,133,1,1,2,127,65,128,10,16,89,65,128,13,16,89,65,128,24,16,89,65,240,25,16,89,65,240,22,16,89,65,192,8,16,89,65,160,30,16,89,65,224,30,16,89,65,192,16,16,89,65,224,20,16,89,65,208,21,16,89,65,192,22,16,89,35,4,34,1,40,2,4,65,124,113,33,0,3,64,32,0,32,1,71,4,64,32,0,40,2,4,65,3,113,65,3,71,4,64,65,0,65,128,9,65,159,1,65,16,16,0,0,11,32,0,65,20,106,16,37,32,0,40,2,4,65,124,113,33,0,12,1,11,11,11,98,1,1,127,32,0,40,2,4,65,124,113,34,1,69,4,64,65,0,32,0,65,164,160,1,73,32,0,40,2,8,27,69,4,64,65,0,65,128,9,65,255,0,65,18,16,0,0,11,15,11,32,0,40,2,8,34,0,69,4,64,65,0,65,128,9,65,131,1,65,16,16,0,0,11,32,1,32,0,54,2,8,32,0,32,0,40,2,4,65,3,113,32,1,114,54,2,4,11,159,1,1,3,127,35,5,32,0,70,4,64,32,0,40,2,8,34,1,69,4,64,65,0,65,128,9,65,147,1,65,30,16,0,0,11,32,1,36,5,11,32,0,16,2,35,6,33,1,32,0,40,2,12,34,2,65,1,77,4,127,65,1,5,65,144,31,40,2,0,32,2,73,4,64,65,128,10,65,192,10,65,22,65,28,16,0,0,11,32,2,65,3,116,65,148,31,106,40,2,0,65,32,113,11,33,3,32,1,40,2,8,33,2,32,0,32,1,35,7,69,65,2,32,3,27,114,54,2,4,32,0,32,2,54,2,8,32,2,32,2,40,2,4,65,3,113,32,0,114,54,2,4,32,1,32,0,54,2,8,11,148,2,1,4,127,32,1,40,2,0,34,2,65,1,113,69,4,64,65,0,65,144,11,65,140,2,65,14,16,0,0,11,32,2,65,124,113,34,2,65,12,73,4,64,65,0,65,144,11,65,142,2,65,14,16,0,0,11,32,2,65,128,2,73,4,127,32,2,65,4,118,5,65,31,32,2,65,252,255,255,255,3,32,2,65,252,255,255,255,3,73,27,34,2,103,107,34,4,65,7,107,33,3,32,2,32,4,65,4,107,118,65,16,115,11,34,2,65,16,73,32,3,65,23,73,113,69,4,64,65,0,65,144,11,65,156,2,65,14,16,0,0,11,32,1,40,2,8,33,5,32,1,40,2,4,34,4,4,64,32,4,32,5,54,2,8,11,32,5,4,64,32,5,32,4,54,2,4,11,32,2,32,3,65,4,116,106,65,2,116,32,0,106,40,2,96,32,1,70,4,64,32,2,32,3,65,4,116,106,65,2,116,32,0,106,32,5,54,2,96,32,5,69,4,64,32,3,65,2,116,32,0,106,34,1,40,2,4,65,126,32,2,119,113,33,2,32,1,32,2,54,2,4,32,2,69,4,64,32,0,32,0,40,2,0,65,126,32,3,119,113,54,2,0,11,11,11,11,195,3,1,5,127,32,1,69,4,64,65,0,65,144,11,65,201,1,65,14,16,0,0,11,32,1,40,2,0,34,3,65,1,113,69,4,64,65,0,65,144,11,65,203,1,65,14,16,0,0,11,32,1,65,4,106,32,1,40,2,0,65,124,113,106,34,4,40,2,0,34,2,65,1,113,4,64,32,0,32,4,16,4,32,1,32,3,65,4,106,32,2,65,124,113,106,34,3,54,2,0,32,1,65,4,106,32,1,40,2,0,65,124,113,106,34,4,40,2,0,33,2,11,32,3,65,2,113,4,64,32,1,65,4,107,40,2,0,34,1,40,2,0,34,6,65,1,113,69,4,64,65,0,65,144,11,65,221,1,65,16,16,0,0,11,32,0,32,1,16,4,32,1,32,6,65,4,106,32,3,65,124,113,106,34,3,54,2,0,11,32,4,32,2,65,2,114,54,2,0,32,3,65,124,113,34,2,65,12,73,4,64,65,0,65,144,11,65,233,1,65,14,16,0,0,11,32,2,32,1,65,4,106,106,32,4,71,4,64,65,0,65,144,11,65,234,1,65,14,16,0,0,11,32,4,65,4,107,32,1,54,2,0,32,2,65,128,2,73,4,127,32,2,65,4,118,5,65,31,32,2,65,252,255,255,255,3,32,2,65,252,255,255,255,3,73,27,34,2,103,107,34,3,65,7,107,33,5,32,2,32,3,65,4,107,118,65,16,115,11,34,2,65,16,73,32,5,65,23,73,113,69,4,64,65,0,65,144,11,65,251,1,65,14,16,0,0,11,32,2,32,5,65,4,116,106,65,2,116,32,0,106,40,2,96,33,3,32,1,65,0,54,2,4,32,1,32,3,54,2,8,32,3,4,64,32,3,32,1,54,2,4,11,32,2,32,5,65,4,116,106,65,2,116,32,0,106,32,1,54,2,96,32,0,32,0,40,2,0,65,1,32,5,116,114,54,2,0,32,5,65,2,116,32,0,106,34,0,32,0,40,2,4,65,1,32,2,116,114,54,2,4,11,205,1,1,2,127,32,1,32,2,75,4,64,65,0,65,144,11,65,249,2,65,14,16,0,0,11,32,1,65,19,106,65,112,113,65,4,107,33,1,32,0,40,2,160,12,34,4,4,64,32,1,32,4,65,4,106,73,4,64,65,0,65,144,11,65,128,3,65,16,16,0,0,11,32,4,32,1,65,16,107,70,4,64,32,4,40,2,0,33,3,32,1,65,16,107,33,1,11,5,32,1,32,0,65,164,12,106,73,4,64,65,0,65,144,11,65,141,3,65,5,16,0,0,11,11,32,2,65,112,113,32,1,107,34,2,65,20,73,4,64,15,11,32,1,32,3,65,2,113,32,2,65,8,107,34,2,65,1,114,114,54,2,0,32,1,65,0,54,2,4,32,1,65,0,54,2,8,32,2,32,1,65,4,106,106,34,2,65,2,54,2,0,32,0,32,2,54,2,160,12,32,0,32,1,16,5,11,150,1,1,2,127,63,0,34,1,65,0,76,4,127,65,1,32,1,107,64,0,65,0,72,5,65,0,11,4,64,0,11,65,176,160,1,65,0,54,2,0,65,208,172,1,65,0,54,2,0,3,64,32,0,65,23,73,4,64,32,0,65,2,116,65,176,160,1,106,65,0,54,2,4,65,0,33,1,3,64,32,1,65,16,73,4,64,32,1,32,0,65,4,116,106,65,2,116,65,176,160,1,106,65,0,54,2,96,32,1,65,1,106,33,1,12,1,11,11,32,0,65,1,106,33,0,12,1,11,11,65,176,160,1,65,212,172,1,63,0,65,16,116,16,6,65,176,160,1,36,9,11,93,1,2,127,32,0,65,164,160,1,73,4,64,15,11,35,9,69,4,64,16,7,11,35,9,33,2,32,0,65,4,107,33,1,32,0,65,15,113,65,1,32,0,27,4,127,65,1,5,32,1,40,2,0,65,1,113,11,4,64,65,0,65,144,11,65,175,4,65,3,16,0,0,11,32,1,32,1,40,2,0,65,1,114,54,2,0,32,2,32,1,16,5,11,154,3,1,3,127,2,64,2,64,2,64,2,64,35,2,14,3,0,1,2,3,11,65,1,36,2,65,0,36,3,16,1,35,6,36,5,35,3,15,11,35,7,69,33,1,35,5,40,2,4,65,124,113,33,0,3,64,35,6,32,0,71,4,64,32,0,36,5,32,0,40,2,4,65,3,113,32,1,71,4,64,32,0,32,1,32,0,40,2,4,65,124,113,114,54,2,4,65,0,36,3,32,0,65,20,106,16,37,35,3,15,11,32,0,40,2,4,65,124,113,33,0,12,1,11,11,65,0,36,3,16,1,35,6,35,5,40,2,4,65,124,113,70,4,64,35,13,33,0,3,64,32,0,65,164,160,1,73,4,64,32,0,40,2,0,34,2,4,64,32,2,16,89,11,32,0,65,4,106,33,0,12,1,11,11,35,5,40,2,4,65,124,113,33,0,3,64,35,6,32,0,71,4,64,32,0,40,2,4,65,3,113,32,1,71,4,64,32,0,32,1,32,0,40,2,4,65,124,113,114,54,2,4,32,0,65,20,106,16,37,11,32,0,40,2,4,65,124,113,33,0,12,1,11,11,35,8,33,0,35,6,36,8,32,0,36,6,32,1,36,7,32,0,40,2,4,65,124,113,36,5,65,2,36,2,11,35,3,15,11,35,5,34,0,35,6,71,4,64,32,0,40,2,4,34,1,65,124,113,36,5,35,7,69,32,1,65,3,113,71,4,64,65,0,65,128,9,65,228,1,65,20,16,0,0,11,32,0,65,164,160,1,73,4,64,32,0,65,0,54,2,4,32,0,65,0,54,2,8,5,35,0,32,0,40,2,0,65,124,113,65,4,106,107,36,0,32,0,65,4,106,16,8,11,65,10,15,11,35,6,34,0,32,0,54,2,4,32,0,32,0,54,2,8,65,0,36,2,11,65,0,11,212,1,1,2,127,32,1,65,128,2,73,4,127,32,1,65,4,118,5,65,31,65,1,65,27,32,1,103,107,116,32,1,106,65,1,107,32,1,32,1,65,254,255,255,255,1,73,27,34,1,103,107,34,3,65,7,107,33,2,32,1,32,3,65,4,107,118,65,16,115,11,34,1,65,16,73,32,2,65,23,73,113,69,4,64,65,0,65,144,11,65,202,2,65,14,16,0,0,11,32,2,65,2,116,32,0,106,40,2,4,65,127,32,1,116,113,34,1,4,127,32,1,104,32,2,65,4,116,106,65,2,116,32,0,106,40,2,96,5,32,0,40,2,0,65,127,32,2,65,1,106,116,113,34,1,4,127,32,1,104,34,1,65,2,116,32,0,106,40,2,4,34,2,69,4,64,65,0,65,144,11,65,215,2,65,18,16,0,0,11,32,2,104,32,1,65,4,116,106,65,2,116,32,0,106,40,2,96,5,65,0,11,11,11,222,2,1,3,127,32,1,65,252,255,255,255,3,75,4,64,65,192,8,65,144,11,65,202,3,65,29,16,0,0,11,32,0,65,12,32,1,65,19,106,65,112,113,65,4,107,32,1,65,12,77,27,34,3,16,10,34,1,69,4,64,63,0,34,1,65,4,32,0,40,2,160,12,32,1,65,16,116,65,4,107,71,116,65,1,65,27,32,3,103,107,116,65,1,107,32,3,106,32,3,32,3,65,254,255,255,255,1,73,27,106,65,255,255,3,106,65,128,128,124,113,65,16,118,34,2,32,1,32,2,74,27,64,0,65,0,72,4,64,32,2,64,0,65,0,72,4,64,0,11,11,32,0,32,1,65,16,116,63,0,65,16,116,16,6,32,0,32,3,16,10,34,1,69,4,64,65,0,65,144,11,65,240,3,65,16,16,0,0,11,11,32,1,40,2,0,65,124,113,32,3,73,4,64,65,0,65,144,11,65,242,3,65,14,16,0,0,11,32,0,32,1,16,4,32,1,40,2,0,33,4,32,3,65,4,106,65,15,113,4,64,65,0,65,144,11,65,229,2,65,14,16,0,0,11,32,4,65,124,113,32,3,107,34,2,65,16,79,4,64,32,1,32,4,65,2,113,32,3,114,54,2,0,32,3,32,1,65,4,106,106,34,3,32,2,65,4,107,65,1,114,54,2,0,32,0,32,3,16,5,5,32,1,32,4,65,126,113,54,2,0,32,1,65,4,106,32,1,40,2,0,65,124,113,106,34,0,32,0,40,2,0,65,125,113,54,2,0,11,32,1,11,220,1,1,2,127,32,0,65,236,255,255,255,3,79,4,64,65,192,8,65,128,9,65,132,2,65,31,16,0,0,11,35,0,35,1,79,4,64,2,64,65,128,16,33,2,3,64,32,2,16,9,107,33,2,35,2,69,4,64,35,0,173,66,200,1,126,66,228,0,128,167,65,128,8,106,36,1,12,2,11,32,2,65,0,74,13,0,11,35,0,34,2,35,1,107,65,128,8,73,65,10,116,32,2,106,36,1,11,11,35,9,69,4,64,16,7,11,35,9,32,0,65,16,106,16,11,34,2,32,1,54,2,12,32,2,32,0,54,2,16,35,8,34,1,40,2,8,33,3,32,2,35,7,32,1,114,54,2,4,32,2,32,3,54,2,8,32,3,32,3,40,2,4,65,3,113,32,2,114,54,2,4,32,1,32,2,54,2,8,35,0,32,2,40,2,0,65,124,113,65,4,106,106,36,0,32,2,65,20,106,34,1,65,0,32,0,252,11,0,32,1,11,13,0,65,0,65,1,65,4,65,160,8,16,45,11,38,0,32,0,40,2,8,32,1,77,4,64,65,128,10,65,144,12,65,166,1,65,45,16,0,0,11,32,1,32,0,40,2,4,106,45,0,0,11,222,1,1,2,127,32,0,40,2,8,34,5,32,2,118,32,1,73,4,64,65,252,255,255,255,3,32,2,118,32,1,73,4,64,65,128,13,65,208,12,65,19,65,48,16,0,0,11,32,0,40,2,0,33,4,32,1,65,8,32,1,65,8,75,27,32,2,116,33,1,32,3,4,64,32,5,65,1,116,34,2,65,252,255,255,255,3,32,2,65,252,255,255,255,3,73,27,34,2,32,1,32,1,32,2,73,27,33,1,11,2,64,32,4,65,20,107,34,3,40,2,0,65,124,113,65,16,107,32,1,79,4,64,32,3,32,1,54,2,16,32,4,33,2,12,1,11,32,1,32,3,40,2,12,16,12,34,2,32,4,32,1,32,3,40,2,16,34,3,32,1,32,3,73,27,252,10,0,0,11,32,2,32,4,71,4,64,32,0,32,2,54,2,0,32,0,32,2,54,2,4,32,2,4,64,32,0,32,2,65,0,16,90,11,11,32,0,32,1,54,2,8,11,11,75,1,1,127,32,0,40,2,12,32,1,77,4,64,32,1,65,0,72,4,64,65,128,10,65,208,12,65,130,1,65,22,16,0,0,11,32,0,32,1,65,1,106,34,3,65,1,65,1,16,15,32,0,32,3,54,2,12,11,32,0,40,2,4,32,1,65,1,116,106,32,2,59,1,0,11,41,0,32,0,40,2,12,32,1,77,4,64,65,128,10,65,208,12,65,242,0,65,42,16,0,0,11,32,0,40,2,4,32,1,65,1,116,106,47,1,0,11,13,0,65,0,65,0,65,9,65,240,16,16,45,11,72,1,1,127,32,0,40,2,12,32,1,77,4,64,32,1,65,0,72,4,64,65,128,10,65,208,12,65,130,1,65,22,16,0,0,11,32,0,32,1,65,1,106,34,3,65,0,65,1,16,15,32,0,32,3,54,2,12,11,32,1,32,0,40,2,4,106,32,2,58,0,0,11,38,0,32,0,40,2,12,32,1,77,4,64,65,128,10,65,208,12,65,242,0,65,42,16,0,0,11,32,1,32,0,40,2,4,106,45,0,0,11,171,1,1,1,127,32,0,40,2,0,32,0,40,2,4,32,1,65,255,1,113,65,189,220,202,149,124,108,65,178,207,217,178,1,106,65,17,119,65,175,214,211,190,2,108,34,0,65,15,118,32,0,115,65,247,148,175,175,120,108,34,0,65,13,118,32,0,115,65,189,220,202,149,124,108,34,0,65,16,118,32,0,115,113,65,2,116,106,40,2,0,33,0,2,64,3,64,32,0,4,64,32,0,40,2,8,34,2,65,1,113,4,127,65,0,5,32,0,45,0,0,32,1,65,255,1,113,70,11,13,2,32,2,65,126,113,33,0,12,1,11,11,65,0,33,0,11,32,0,69,4,64,65,240,22,65,176,23,65,233,0,65,17,16,0,0,11,32,0,40,2,4,11,41,0,32,0,40,2,12,32,1,77,4,64,65,128,10,65,208,12,65,242,0,65,42,16,0,0,11,32,0,40,2,4,32,1,65,1,116,106,46,1,0,11,30,0,32,0,193,32,1,193,74,4,64,65,127,15,11,32,1,193,32,0,193,74,4,64,65,1,15,11,65,0,11,155,2,1,4,127,32,3,32,2,32,1,107,65,1,106,34,5,32,3,107,65,1,113,107,32,5,65,1,113,32,3,27,32,1,106,33,7,3,64,32,2,32,7,78,4,64,32,7,65,1,116,32,0,106,34,3,46,1,2,34,6,33,5,32,3,46,1,0,33,3,65,2,36,10,32,3,32,6,32,4,40,2,0,17,1,0,65,0,76,4,64,32,3,33,5,32,6,33,3,11,32,7,65,1,107,33,6,3,64,32,1,32,6,76,4,64,2,64,32,6,65,1,116,32,0,106,46,1,0,33,8,65,2,36,10,32,8,32,3,32,4,40,2,0,17,1,0,65,0,76,13,0,32,6,65,1,116,32,0,106,32,8,59,1,4,32,6,65,1,107,33,6,12,2,11,11,11,32,6,65,1,116,32,0,106,32,3,59,1,4,3,64,32,1,32,6,76,4,64,2,64,32,6,65,1,116,32,0,106,46,1,0,33,3,65,2,36,10,32,3,32,5,32,4,40,2,0,17,1,0,65,0,76,13,0,32,6,65,1,116,32,0,106,32,3,59,1,2,32,6,65,1,107,33,6,12,2,11,11,11,32,6,65,1,116,32,0,106,32,5,59,1,2,32,7,65,2,106,33,7,12,1,11,11,11,148,2,1,3,127,32,1,32,2,70,4,64,32,1,15,11,32,1,65,1,116,32,0,106,46,1,0,33,5,32,1,65,1,106,34,4,65,1,116,32,0,106,46,1,0,33,6,65,2,36,10,32,5,32,6,32,3,40,2,0,17,1,0,65,0,74,4,64,3,64,32,2,32,4,74,4,127,32,4,65,1,116,32,0,106,34,5,46,1,2,33,6,32,5,46,1,0,33,5,65,2,36,10,32,6,32,5,32,3,40,2,0,17,1,0,65,31,118,5,65,0,11,4,64,32,4,65,1,106,33,4,12,1,11,11,32,4,33,2,3,64,32,1,32,2,72,4,64,32,1,65,1,116,32,0,106,34,3,46,1,0,33,5,32,3,32,2,65,1,116,32,0,106,34,3,46,1,0,59,1,0,32,1,65,1,106,33,1,32,3,32,5,59,1,0,32,2,65,1,107,33,2,12,1,11,11,5,3,64,32,2,32,4,74,4,127,32,4,65,1,116,32,0,106,34,1,46,1,2,33,5,32,1,46,1,0,33,1,65,2,36,10,32,5,32,1,32,3,40,2,0,17,1,0,65,0,78,5,65,0,11,4,64,32,4,65,1,106,33,4,12,1,11,11,11,32,4,11,216,1,1,3,127,32,3,32,2,65,1,107,34,6,106,33,7,32,6,65,1,106,33,2,3,64,32,1,32,2,72,4,64,32,4,32,2,65,1,107,34,2,65,1,116,34,8,106,32,0,32,8,106,46,1,0,59,1,0,12,1,11,11,3,64,32,3,32,6,74,4,64,32,7,32,6,107,65,1,116,32,4,106,32,6,65,1,116,32,0,106,46,1,2,59,1,0,32,6,65,1,106,33,6,12,1,11,11,3,64,32,1,32,3,76,4,64,32,6,65,1,116,32,4,106,46,1,0,33,7,32,2,65,1,116,32,4,106,46,1,0,33,8,65,2,36,10,32,7,32,8,32,5,40,2,0,17,1,0,65,0,72,4,64,32,1,65,1,116,32,0,106,32,7,59,1,0,32,6,65,1,107,33,6,5,32,1,65,1,116,32,0,106,32,8,59,1,0,32,2,65,1,106,33,2,11,32,1,65,1,106,33,1,12,1,11,11,11,156,5,2,10,127,1,126,32,1,65,48,76,4,64,32,1,65,1,76,4,64,15,11,2,64,2,64,32,1,65,3,71,4,64,32,1,65,2,70,13,1,12,2,11,32,0,46,1,0,33,5,32,0,46,1,2,33,3,65,2,36,10,32,0,32,3,32,5,32,5,32,3,32,2,40,2,0,17,1,0,65,0,74,34,1,27,59,1,0,32,0,46,1,4,33,4,65,2,36,10,32,5,32,3,32,1,27,34,3,32,4,32,2,40,2,0,17,1,0,65,0,74,33,1,32,0,32,4,32,3,32,1,27,59,1,2,32,0,32,3,32,4,32,1,27,59,1,4,11,32,0,46,1,0,33,4,32,0,46,1,2,33,3,65,2,36,10,32,0,32,3,32,4,32,4,32,3,32,2,40,2,0,17,1,0,65,0,74,34,1,27,59,1,0,32,0,32,4,32,3,32,1,27,59,1,2,15,11,32,0,65,0,32,1,65,1,107,65,0,32,2,16,24,15,11,65,33,32,1,103,107,34,8,65,2,116,34,7,65,1,116,33,5,35,9,69,4,64,16,7,11,35,9,32,5,16,11,65,4,106,34,10,32,7,106,33,11,3,64,32,6,32,8,73,4,64,32,6,65,2,116,32,10,106,65,127,54,2,0,32,6,65,1,106,33,6,12,1,11,11,35,9,69,4,64,16,7,11,35,9,32,1,65,1,116,16,11,65,4,106,33,12,32,0,65,0,32,1,65,1,107,34,9,32,2,16,25,34,7,65,1,106,34,1,65,32,72,4,64,32,0,65,0,32,9,65,31,32,9,65,31,72,27,34,7,32,1,32,2,16,24,11,3,64,32,7,32,9,72,4,64,32,0,32,7,65,1,106,34,5,32,9,32,2,16,25,34,6,32,5,107,65,1,106,34,8,65,32,72,4,64,32,0,32,5,32,9,32,5,65,31,106,34,1,32,1,32,9,74,27,34,6,32,8,32,2,16,24,11,32,3,32,5,106,173,66,30,134,32,9,65,1,106,173,34,13,128,32,5,32,6,106,65,1,106,173,66,30,134,32,13,128,133,167,103,33,1,3,64,32,1,32,4,73,4,64,32,4,65,2,116,32,10,106,40,2,0,34,8,65,127,71,4,64,32,0,32,8,32,11,32,4,65,2,116,34,3,106,40,2,0,65,1,106,32,7,32,12,32,2,16,26,32,3,32,10,106,65,127,54,2,0,32,8,33,3,11,32,4,65,1,107,33,4,12,1,11,11,32,10,32,1,65,2,116,34,4,106,32,3,54,2,0,32,4,32,11,106,32,7,54,2,0,32,5,33,3,32,6,33,7,32,1,33,4,12,1,11,11,3,64,32,4,4,64,32,4,65,2,116,32,10,106,40,2,0,34,1,65,127,71,4,64,32,0,32,1,32,4,65,2,116,32,11,106,40,2,0,65,1,106,32,9,32,12,32,2,16,26,11,32,4,65,1,107,33,4,12,1,11,11,32,12,16,8,32,10,16,8,11,61,1,2,127,32,0,40,2,12,34,1,65,0,76,4,64,65,128,24,65,208,12,65,163,2,65,18,16,0,0,11,32,0,40,2,4,32,1,65,1,107,34,1,65,1,116,106,46,1,0,33,2,32,0,32,1,54,2,12,32,2,11,40,0,32,0,40,2,8,32,1,77,4,64,65,128,10,65,144,12,65,177,1,65,45,16,0,0,11,32,1,32,0,40,2,4,106,32,2,58,0,0,11,45,0,2,64,2,64,2,64,35,10,65,2,107,14,2,1,2,0,11,0,11,32,1,32,0,65,255,1,113,16,14,65,3,118,33,2,11,32,0,32,1,32,2,16,52,11,45,0,2,64,2,64,2,64,35,10,65,2,107,14,2,1,2,0,11,0,11,32,1,32,0,65,255,1,113,16,14,65,3,118,33,2,11,32,0,32,1,32,2,16,58,11,41,0,32,0,40,2,12,32,1,77,4,64,65,128,10,65,208,12,65,242,0,65,42,16,0,0,11,32,0,40,2,4,32,1,65,2,116,106,42,2,0,11,97,1,3,127,32,0,4,64,32,0,65,20,107,34,1,40,2,4,65,3,113,65,3,70,4,64,65,160,30,65,128,9,65,209,2,65,7,16,0,0,11,32,1,16,2,35,4,34,3,40,2,8,33,2,32,1,32,3,65,3,114,54,2,4,32,1,32,2,54,2,8,32,2,32,2,40,2,4,65,3,113,32,1,114,54,2,4,32,3,32,1,54,2,8,11,32,0,11,110,1,2,127,32,0,69,4,64,15,11,32,0,65,20,107,34,1,40,2,4,65,3,113,65,3,71,4,64,65,224,30,65,128,9,65,223,2,65,5,16,0,0,11,35,2,65,1,70,4,64,32,1,16,3,5,32,1,16,2,35,8,34,0,40,2,8,33,2,32,1,35,7,32,0,114,54,2,4,32,1,32,2,54,2,8,32,2,32,2,40,2,4,65,3,113,32,1,114,54,2,4,32,0,32,1,54,2,8,11,11,57,0,35,2,65,0,74,4,64,3,64,35,2,4,64,16,9,26,12,1,11,11,11,16,9,26,3,64,35,2,4,64,16,9,26,12,1,11,11,35,0,173,66,200,1,126,66,228,0,128,167,65,128,8,106,36,1,11,70,1,3,127,32,0,40,2,4,34,1,32,0,40,2,12,65,2,116,106,33,3,3,64,32,1,32,3,73,4,64,32,1,40,2,0,34,2,4,64,32,2,16,89,11,32,1,65,4,106,33,1,12,1,11,11,32,0,40,2,0,34,0,4,64,32,0,16,89,11,11,193,1,1,3,127,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,0,65,8,107,40,2,0,14,18,0,1,8,8,8,2,8,7,7,8,3,7,7,8,4,7,7,8,5,11,15,11,15,11,32,0,16,36,15,11,32,0,16,36,15,11,32,0,40,2,0,34,1,4,64,32,1,16,89,11,32,0,40,2,16,65,12,108,32,0,40,2,8,34,2,34,0,106,33,3,3,64,32,0,32,3,73,4,64,32,0,40,2,8,65,1,113,69,4,64,32,0,40,2,4,34,1,4,64,32,1,16,89,11,11,32,0,65,12,106,33,0,12,1,11,11,32,2,4,64,32,2,16,89,11,15,11,0,11,0,11,32,0,40,2,4,34,0,4,64,32,0,16,89,11,15,11,32,0,40,2,0,34,0,4,64,32,0,16,89,11,11,6,0,32,0,36,10,11,86,0,63,0,65,16,116,65,164,160,1,107,65,1,118,36,1,65,180,9,65,176,9,54,2,0,65,184,9,65,176,9,54,2,0,65,176,9,36,4,65,212,9,65,208,9,54,2,0,65,216,9,65,208,9,54,2,0,65,208,9,36,6,65,228,10,65,224,10,54,2,0,65,232,10,65,224,10,54,2,0,65,224,10,36,8,11,157,5,1,3,127,35,13,65,8,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,66,0,55,3,0,32,2,32,3,32,5,65,255,1,113,16,20,16,21,33,6,35,13,32,6,54,2,0,32,6,40,2,12,69,4,64,35,13,65,192,22,54,2,0,65,192,22,32,0,32,3,32,5,65,255,1,113,16,20,16,14,16,22,34,0,32,4,193,76,4,64,32,4,33,0,11,35,13,65,8,106,36,13,32,0,15,11,35,13,65,192,22,54,2,0,65,192,22,32,0,32,3,32,5,65,255,1,113,16,20,16,14,16,22,33,7,32,1,32,3,32,5,65,255,1,113,16,20,16,21,33,0,35,13,32,0,54,2,0,35,13,65,224,23,54,2,4,32,0,40,2,4,32,0,40,2,12,65,224,23,16,27,32,1,32,3,32,5,65,255,1,113,16,20,16,21,33,0,35,13,32,0,54,2,0,32,0,16,28,33,6,32,2,32,3,32,5,65,255,1,113,16,20,16,21,33,0,35,13,32,0,54,2,0,35,13,65,176,24,54,2,4,32,0,40,2,4,32,0,40,2,12,65,176,24,16,27,32,2,32,3,32,5,65,255,1,113,16,20,16,21,33,0,35,13,32,0,54,2,0,32,0,16,28,33,8,32,1,32,3,32,5,65,255,1,113,16,20,16,21,33,0,35,13,32,0,54,2,0,32,0,40,2,12,65,0,71,34,0,32,6,32,8,72,113,4,64,35,13,65,8,106,36,13,32,7,32,4,32,7,193,32,4,193,74,27,15,11,32,7,32,6,107,33,7,2,64,32,0,69,13,0,32,1,32,3,32,5,65,255,1,113,16,20,16,21,33,0,35,13,32,0,54,2,0,32,0,16,28,33,0,32,2,32,3,32,5,65,255,1,113,16,20,16,21,33,6,35,13,32,6,54,2,0,32,6,40,2,12,65,0,71,33,6,3,127,32,6,32,0,32,8,74,113,13,1,32,7,32,8,106,33,7,32,6,69,13,1,32,2,32,3,32,5,65,255,1,113,16,20,16,21,33,6,35,13,32,6,54,2,0,32,6,16,28,33,8,32,1,32,3,32,5,65,255,1,113,16,20,16,21,33,6,35,13,32,6,54,2,0,32,6,40,2,12,65,0,71,34,6,32,0,32,8,72,113,13,1,32,7,32,0,107,33,7,32,6,4,127,32,1,32,3,32,5,65,255,1,113,16,20,16,21,33,0,35,13,32,0,54,2,0,32,0,16,28,33,0,32,2,32,3,32,5,65,255,1,113,16,20,16,21,33,6,35,13,32,6,54,2,0,32,6,40,2,12,65,0,71,33,6,12,1,5,35,13,65,8,106,36,13,32,7,32,4,32,7,193,34,0,32,4,193,74,32,0,65,0,74,113,27,11,11,15,11,35,13,65,8,106,36,13,32,7,32,4,32,7,193,34,0,32,4,193,74,32,0,65,0,74,113,27,11,221,4,1,8,127,35,13,65,20,107,36,13,2,64,35,13,65,164,32,72,13,0,35,13,34,2,65,0,65,20,252,11,0,32,2,65,0,65,1,65,4,65,176,25,16,45,34,4,54,2,0,35,13,65,0,65,1,65,4,65,208,25,16,45,34,5,54,2,4,32,0,34,2,65,192,0,16,14,65,1,115,65,3,116,65,6,106,33,6,65,127,33,0,2,64,32,2,40,2,8,34,7,65,0,76,65,1,32,7,27,13,0,32,2,40,2,4,33,8,3,64,32,1,32,7,72,4,64,32,1,34,0,32,8,106,45,0,0,32,6,65,255,1,113,70,13,2,32,0,65,1,106,33,1,12,1,11,11,65,127,33,0,11,3,64,32,3,65,255,1,113,65,192,0,73,4,64,2,64,32,2,32,3,65,255,1,113,16,14,4,127,32,2,32,3,65,255,1,113,16,14,65,3,118,32,2,65,192,0,16,14,71,5,65,1,11,13,0,35,13,34,1,65,192,16,54,2,8,32,1,65,192,16,32,2,32,3,65,255,1,113,16,14,65,7,113,16,60,34,1,54,2,12,35,13,33,6,32,2,65,192,0,16,14,33,7,65,3,36,10,32,6,32,3,32,2,32,7,32,1,40,2,0,17,0,0,34,6,54,2,16,32,6,40,2,12,69,13,0,32,3,65,255,1,113,65,10,116,33,7,65,0,33,1,32,6,40,2,12,33,8,3,64,32,1,32,8,72,4,64,2,64,32,2,32,6,32,1,16,17,65,63,113,16,14,4,64,32,6,32,1,16,17,32,0,70,4,64,35,13,65,20,106,36,13,65,0,15,11,32,5,32,5,40,2,12,32,6,32,1,16,17,32,7,106,16,16,12,1,11,32,4,32,4,40,2,12,32,6,32,1,16,17,32,7,106,16,16,11,32,1,65,1,106,33,1,12,1,11,11,11,32,3,65,1,106,33,3,12,1,11,11,32,5,40,2,12,69,4,64,35,13,65,20,106,36,13,32,4,15,11,35,13,65,4,107,36,13,35,13,65,164,32,72,13,0,35,13,65,0,54,2,0,32,5,40,2,12,34,0,32,4,40,2,12,34,1,106,34,2,65,254,255,255,255,1,75,4,64,65,128,13,65,208,12,65,244,1,65,60,16,0,0,11,35,13,32,2,65,1,65,4,65,0,16,45,34,2,54,2,0,32,2,40,2,4,34,3,32,5,40,2,4,32,0,65,1,116,34,0,252,10,0,0,32,0,32,3,106,32,4,40,2,4,32,1,65,1,116,252,10,0,0,35,13,65,4,106,36,13,35,13,65,20,106,36,13,32,2,15,11,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,194,1,1,5,127,35,13,65,12,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,4,66,0,55,3,0,32,4,65,0,54,2,8,32,4,32,1,16,61,34,6,54,2,0,32,6,4,64,32,0,65,255,1,113,65,1,70,4,64,32,6,40,2,12,33,0,35,13,65,12,106,36,13,32,0,15,11,32,6,40,2,12,33,4,3,64,32,2,32,4,72,4,64,32,6,32,2,16,17,32,1,16,59,33,5,35,13,32,5,54,2,4,32,0,65,1,107,32,5,16,42,32,3,106,33,3,32,2,65,1,106,33,2,12,1,11,11,35,13,65,12,106,36,13,32,3,15,11,35,13,65,144,27,54,2,8,65,144,27,65,0,65,0,65,0,16,0,35,13,65,12,106,36,13,65,0,11,115,1,2,127,35,13,65,8,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,2,66,0,55,3,0,32,2,65,224,20,54,2,0,32,2,65,224,20,32,0,32,1,65,255,1,113,16,14,65,7,113,16,60,34,3,54,2,4,32,0,65,192,0,16,14,33,2,65,3,36,10,32,1,32,0,32,2,32,3,40,2,0,17,0,0,33,0,35,13,65,8,106,36,13,32,0,11,229,11,1,15,127,35,13,65,48,107,36,13,2,64,2,64,35,13,65,164,32,72,13,0,35,13,34,3,65,0,65,48,252,11,0,32,3,16,65,34,6,54,2,0,35,13,16,65,34,7,54,2,4,32,0,34,4,65,192,0,16,14,65,1,115,65,3,116,65,6,106,33,3,65,127,33,0,2,64,32,4,40,2,8,34,9,65,0,76,65,1,32,9,27,13,0,32,4,40,2,4,33,10,3,64,32,2,32,9,72,4,64,32,2,34,0,32,10,106,45,0,0,32,3,65,255,1,113,70,13,2,32,0,65,1,106,33,2,12,1,11,11,65,127,33,0,11,3,64,32,5,65,255,1,113,65,63,77,4,64,32,4,32,5,65,255,1,113,16,14,4,64,35,13,65,208,21,54,2,8,65,208,21,32,4,32,5,65,255,1,113,16,14,16,22,32,8,106,33,8,32,4,32,5,65,255,1,113,16,14,65,3,118,32,4,65,192,0,16,14,70,4,64,35,13,32,4,32,5,16,43,34,11,54,2,12,65,0,33,2,65,127,33,3,2,64,32,11,40,2,12,34,9,65,0,76,65,1,32,9,27,13,0,32,11,40,2,4,33,10,3,64,32,2,32,9,72,4,64,32,2,34,3,32,10,106,45,0,0,32,0,65,255,1,113,70,13,2,32,3,65,1,106,33,2,12,1,11,11,65,127,33,3,11,32,3,65,0,78,4,64,65,2,65,2,65,17,65,160,29,16,45,33,0,12,6,11,65,0,33,3,32,11,40,2,12,33,12,3,64,32,3,65,255,1,113,32,12,65,255,1,113,73,4,64,32,11,32,3,65,255,1,113,16,20,33,13,32,11,32,3,65,255,1,113,16,20,34,9,65,255,1,113,65,189,220,202,149,124,108,65,178,207,217,178,1,106,65,17,119,65,175,214,211,190,2,108,34,2,32,2,65,15,118,115,65,247,148,175,175,120,108,34,2,32,2,65,13,118,115,65,189,220,202,149,124,108,33,2,32,6,40,2,0,32,6,40,2,4,32,2,32,2,65,16,118,115,113,65,2,116,106,40,2,0,33,2,2,64,3,64,32,2,4,64,32,2,40,2,8,34,10,65,1,113,4,127,65,0,5,32,2,45,0,0,32,9,65,255,1,113,70,11,13,2,32,10,65,126,113,33,2,12,1,11,11,65,0,33,2,11,32,2,4,127,32,6,32,11,32,3,65,255,1,113,16,20,16,21,5,65,0,65,1,65,13,65,224,29,16,45,11,33,14,35,13,34,2,32,14,54,2,20,32,2,65,1,65,1,65,13,65,0,16,45,34,15,54,2,24,35,13,32,15,40,2,4,54,2,28,35,13,65,192,22,54,2,32,65,192,22,32,4,32,5,65,255,1,113,16,14,65,7,113,16,22,33,2,32,15,40,2,4,32,2,59,1,0,35,13,32,15,54,2,16,35,13,65,4,107,36,13,35,13,65,164,32,72,13,6,35,13,65,0,54,2,0,32,14,40,2,12,34,2,32,15,40,2,12,34,9,106,34,10,65,254,255,255,255,1,75,4,64,65,128,13,65,208,12,65,244,1,65,60,16,0,0,11,35,13,32,10,65,1,65,13,65,0,16,45,34,16,54,2,0,32,16,40,2,4,34,10,32,14,40,2,4,32,2,65,1,116,34,2,252,10,0,0,32,2,32,10,106,32,15,40,2,4,32,9,65,1,116,252,10,0,0,35,13,65,4,106,36,13,35,13,32,16,54,2,16,32,6,32,13,32,16,16,66,32,11,32,3,65,255,1,113,16,20,34,9,65,255,1,113,65,189,220,202,149,124,108,65,178,207,217,178,1,106,65,17,119,65,175,214,211,190,2,108,34,2,32,2,65,15,118,115,65,247,148,175,175,120,108,34,2,32,2,65,13,118,115,65,189,220,202,149,124,108,33,2,32,7,40,2,0,32,7,40,2,4,32,2,32,2,65,16,118,115,113,65,2,116,106,40,2,0,33,2,2,64,3,64,32,2,4,64,32,2,40,2,8,34,10,65,1,113,4,127,65,0,5,32,2,45,0,0,32,9,65,255,1,113,70,11,13,2,32,10,65,126,113,33,2,12,1,11,11,65,0,33,2,11,32,2,69,4,64,32,11,32,3,65,255,1,113,16,20,33,2,32,4,32,11,32,3,65,255,1,113,16,20,32,4,65,192,0,16,14,16,63,33,9,35,13,32,9,54,2,16,32,7,32,2,32,9,16,66,11,32,3,65,1,106,33,3,12,1,11,11,11,11,32,5,65,1,106,33,5,12,1,11,11,65,0,33,5,35,13,34,0,65,4,107,36,13,35,13,65,164,32,72,13,0,35,13,34,2,65,0,54,2,0,32,6,40,2,8,33,9,32,6,40,2,16,33,10,32,2,65,8,107,36,13,35,13,65,164,32,72,13,0,35,13,34,3,66,0,55,3,0,32,3,65,16,65,9,16,12,34,11,54,2,0,32,11,65,0,54,2,0,32,11,65,0,54,2,4,32,11,65,0,54,2,8,32,11,65,0,54,2,12,32,10,65,252,255,255,255,3,75,4,64,65,128,13,65,208,12,65,198,0,65,60,16,0,0,11,35,13,32,10,65,8,32,10,65,8,75,27,34,3,65,0,16,12,34,12,54,2,4,32,11,32,12,54,2,0,32,12,4,64,32,11,32,12,65,0,16,90,11,32,11,32,12,54,2,4,32,11,32,3,54,2,8,32,11,32,10,54,2,12,35,13,65,8,106,36,13,32,2,32,11,54,2,0,65,0,33,2,65,0,33,3,3,64,32,3,32,10,72,4,64,32,3,65,12,108,32,9,106,34,12,40,2,8,65,1,113,69,4,64,32,11,32,2,32,12,45,0,0,16,19,32,2,65,1,106,33,2,11,32,3,65,1,106,33,3,12,1,11,11,32,11,32,2,65,0,65,0,16,15,32,11,32,2,54,2,12,35,13,65,4,106,36,13,32,0,32,11,54,2,36,65,0,33,3,32,11,40,2,12,33,0,3,64,32,3,65,255,1,113,32,0,65,255,1,113,73,4,64,65,6,36,10,32,4,32,6,32,7,32,11,32,5,32,3,65,208,24,40,2,0,17,10,0,33,5,32,3,65,1,106,33,3,12,1,11,11,35,13,65,2,65,2,65,17,65,0,16,45,34,0,54,2,40,35,13,32,0,40,2,4,54,2,44,32,0,40,2,4,67,0,0,0,0,56,2,0,32,1,32,5,32,8,106,32,8,32,5,107,32,4,65,192,0,16,14,65,1,70,27,178,67,0,0,200,66,149,146,33,1,32,0,40,2,4,32,1,56,2,4,12,1,11,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,65,48,106,36,13,32,0,11,135,1,1,2,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,4,65,0,54,2,0,32,0,32,1,116,34,5,65,0,16,12,33,1,32,3,4,64,32,1,32,3,32,5,252,10,0,0,11,32,4,32,1,54,2,0,65,16,32,2,16,12,34,2,32,1,54,2,0,32,1,4,64,32,2,32,1,65,0,16,90,11,32,2,32,1,54,2,4,32,2,32,5,54,2,8,32,2,32,0,54,2,12,35,13,65,4,106,36,13,32,2,11,211,8,1,4,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,1,65,4,65,240,11,16,45,34,5,54,2,0,32,0,192,65,3,118,33,4,32,0,65,7,113,34,6,65,7,73,33,3,32,6,65,0,71,33,6,32,2,65,255,1,113,4,64,32,1,32,0,65,8,107,192,34,2,65,255,255,3,113,16,14,69,4,64,32,4,65,255,1,113,65,1,70,4,64,32,5,32,5,40,2,12,32,2,65,192,6,106,16,16,32,5,32,5,40,2,12,32,2,65,128,6,106,16,16,32,5,32,5,40,2,12,32,2,65,192,5,106,16,16,32,5,32,5,40,2,12,32,2,65,128,5,106,16,16,5,32,5,32,5,40,2,12,32,2,16,16,11,32,4,65,255,1,113,65,6,70,4,64,32,1,32,0,65,16,107,192,34,2,65,255,255,3,113,16,14,69,4,64,32,5,32,5,40,2,12,32,2,16,16,11,11,11,32,3,4,64,32,1,32,0,65,7,107,192,34,2,65,255,255,3,113,16,14,4,64,32,1,32,2,65,255,255,3,113,16,14,65,3,118,69,4,64,32,4,65,255,1,113,65,1,70,4,64,32,5,32,5,40,2,12,32,2,65,192,6,106,16,16,32,5,32,5,40,2,12,32,2,65,128,6,106,16,16,32,5,32,5,40,2,12,32,2,65,192,5,106,16,16,32,5,32,5,40,2,12,32,2,65,128,5,106,16,16,5,32,5,32,5,40,2,12,32,2,16,16,11,11,5,32,4,65,255,1,113,65,3,70,4,127,32,1,65,194,0,16,14,32,2,65,255,255,3,113,70,5,65,0,11,4,64,32,5,32,5,40,2,12,32,2,16,16,11,11,11,32,6,4,64,32,1,32,0,65,9,107,192,34,0,65,255,255,3,113,16,14,4,64,32,1,32,0,65,255,255,3,113,16,14,65,3,118,69,4,64,32,4,65,255,1,113,65,1,70,4,64,32,5,32,5,40,2,12,32,0,65,192,6,106,16,16,32,5,32,5,40,2,12,32,0,65,128,6,106,16,16,32,5,32,5,40,2,12,32,0,65,192,5,106,16,16,32,5,32,5,40,2,12,32,0,65,128,5,106,16,16,5,32,5,32,5,40,2,12,32,0,16,16,11,11,5,32,4,65,255,1,113,65,3,70,4,127,32,1,65,194,0,16,14,32,0,65,255,255,3,113,70,5,65,0,11,4,64,32,5,32,5,40,2,12,32,0,16,16,11,11,11,35,13,65,4,106,36,13,32,5,15,11,32,1,32,0,65,8,106,192,34,2,65,255,255,3,113,16,14,69,4,64,32,4,65,255,1,113,65,6,70,4,64,32,5,32,5,40,2,12,32,2,65,192,2,106,16,16,32,5,32,5,40,2,12,32,2,65,128,2,106,16,16,32,5,32,5,40,2,12,32,2,65,192,1,106,16,16,32,5,32,5,40,2,12,32,2,65,128,1,106,16,16,5,32,5,32,5,40,2,12,32,2,16,16,11,32,4,65,255,1,113,65,1,70,4,64,32,1,32,0,65,16,106,192,34,2,65,255,255,3,113,16,14,69,4,64,32,5,32,5,40,2,12,32,2,16,16,11,11,11,32,3,4,64,32,1,32,0,65,9,106,192,34,2,65,255,255,3,113,16,14,4,64,32,1,32,2,65,255,255,3,113,16,14,65,3,118,65,1,70,4,64,32,4,65,255,1,113,65,6,70,4,64,32,5,32,5,40,2,12,32,2,65,192,2,106,16,16,32,5,32,5,40,2,12,32,2,65,128,2,106,16,16,32,5,32,5,40,2,12,32,2,65,192,1,106,16,16,32,5,32,5,40,2,12,32,2,65,128,1,106,16,16,5,32,5,32,5,40,2,12,32,2,16,16,11,11,5,32,4,65,255,1,113,65,4,70,4,127,32,1,65,194,0,16,14,32,2,65,255,255,3,113,70,5,65,0,11,4,64,32,5,32,5,40,2,12,32,2,16,16,11,11,11,32,6,4,64,32,1,32,0,65,7,106,192,34,0,65,255,255,3,113,16,14,4,64,32,1,32,0,65,255,255,3,113,16,14,65,3,118,65,1,70,4,64,32,4,65,255,1,113,65,6,70,4,64,32,5,32,5,40,2,12,32,0,65,192,2,106,16,16,32,5,32,5,40,2,12,32,0,65,128,2,106,16,16,32,5,32,5,40,2,12,32,0,65,192,1,106,16,16,32,5,32,5,40,2,12,32,0,65,128,1,106,16,16,5,32,5,32,5,40,2,12,32,0,16,16,11,11,5,32,4,65,255,1,113,65,4,70,4,127,32,1,65,194,0,16,14,32,0,65,255,255,3,113,70,5,65,0,11,4,64,32,5,32,5,40,2,12,32,0,16,16,11,11,11,35,13,65,4,106,36,13,32,5,11,179,4,2,6,127,1,124,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,1,65,4,65,208,13,16,45,34,4,54,2,0,65,7,32,0,192,65,3,118,34,5,192,107,33,6,65,7,32,0,65,7,113,34,7,107,33,8,32,0,183,32,5,183,32,7,183,164,68,0,0,0,0,0,0,34,64,162,161,33,9,32,0,65,9,107,33,3,3,64,32,9,32,3,183,101,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,9,107,33,3,12,2,11,11,11,32,0,183,32,5,183,32,8,183,164,68,0,0,0,0,0,0,28,64,162,161,33,9,32,0,65,7,107,33,3,3,64,32,9,32,3,183,101,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,7,107,33,3,12,2,11,11,11,32,0,183,32,6,183,32,7,183,164,68,0,0,0,0,0,0,28,64,162,160,33,9,32,0,65,7,106,33,3,3,64,32,9,32,3,183,102,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,7,106,33,3,12,2,11,11,11,32,0,183,32,6,183,32,8,183,164,68,0,0,0,0,0,0,34,64,162,160,33,9,32,0,65,9,106,33,3,3,64,32,9,32,3,183,102,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,9,106,33,3,12,2,11,11,11,35,13,65,4,106,36,13,32,4,11,227,4,1,9,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,1,65,4,65,144,14,16,45,34,7,54,2,0,32,0,65,7,113,34,5,65,1,75,34,8,32,5,65,0,71,32,8,27,33,4,32,5,65,6,73,34,3,32,5,65,7,73,32,3,27,33,5,32,0,192,65,3,118,192,34,9,65,1,74,34,10,32,9,65,0,74,32,10,27,33,6,32,9,65,6,72,34,11,32,9,65,7,72,32,11,27,33,9,32,10,4,64,32,4,4,64,32,1,32,0,65,17,107,34,10,192,16,14,4,127,32,2,65,255,1,113,32,1,32,10,192,16,14,65,3,118,71,5,65,1,11,4,64,32,7,32,7,40,2,12,32,10,192,16,16,11,11,32,5,4,64,32,1,32,0,65,15,107,34,10,192,16,14,4,127,32,2,65,255,1,113,32,1,32,10,192,16,14,65,3,118,71,5,65,1,11,4,64,32,7,32,7,40,2,12,32,10,192,16,16,11,11,11,32,11,4,64,32,4,4,64,32,1,32,0,65,15,106,34,4,192,16,14,4,127,32,2,65,255,1,113,32,1,32,4,192,16,14,65,3,118,71,5,65,1,11,4,64,32,7,32,7,40,2,12,32,4,192,16,16,11,11,32,5,4,64,32,1,32,0,65,17,106,34,4,192,16,14,4,127,32,2,65,255,1,113,32,1,32,4,192,16,14,65,3,118,71,5,65,1,11,4,64,32,7,32,7,40,2,12,32,4,192,16,16,11,11,11,32,8,4,64,32,6,4,64,32,1,32,0,65,10,107,34,4,192,16,14,4,127,32,2,65,255,1,113,32,1,32,4,192,16,14,65,3,118,71,5,65,1,11,4,64,32,7,32,7,40,2,12,32,4,192,16,16,11,11,32,9,4,64,32,1,32,0,65,6,106,34,4,192,16,14,4,127,32,2,65,255,1,113,32,1,32,4,192,16,14,65,3,118,71,5,65,1,11,4,64,32,7,32,7,40,2,12,32,4,192,16,16,11,11,11,32,3,4,64,32,6,4,64,32,1,32,0,65,6,107,34,3,192,16,14,4,127,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,5,65,1,11,4,64,32,7,32,7,40,2,12,32,3,192,16,16,11,11,32,9,4,64,32,1,32,0,65,10,106,34,0,192,16,14,4,127,32,2,65,255,1,113,32,1,32,0,192,16,14,65,3,118,71,5,65,1,11,4,64,32,7,32,7,40,2,12,32,0,192,16,16,11,11,11,35,13,65,4,106,36,13,32,7,11,250,3,1,6,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,1,65,4,65,208,14,16,45,34,4,54,2,0,65,7,32,0,192,65,3,118,34,3,107,33,6,65,7,32,0,65,7,113,34,5,107,33,7,32,0,32,3,65,3,116,107,33,8,32,0,65,8,107,33,3,3,64,32,3,192,32,8,192,78,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,8,107,33,3,12,2,11,11,11,32,0,32,7,106,33,7,32,0,65,1,106,33,3,3,64,32,3,192,32,7,192,76,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,1,106,33,3,12,2,11,11,11,32,6,65,3,116,32,0,106,33,6,32,0,65,8,106,33,3,3,64,32,3,192,32,6,192,76,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,8,106,33,3,12,2,11,11,11,32,0,32,5,107,33,3,32,0,65,1,107,33,0,3,64,32,0,192,32,3,192,78,4,64,2,64,2,64,32,1,32,0,192,16,14,69,4,64,32,4,32,4,40,2,12,32,0,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,0,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,0,192,16,16,11,12,1,11,32,0,65,1,107,33,0,12,2,11,11,11,35,13,65,4,106,36,13,32,4,11,204,7,2,6,127,1,124,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,1,65,4,65,144,15,16,45,34,4,54,2,0,65,7,32,0,192,65,3,118,34,6,107,33,7,65,7,32,0,65,7,113,34,5,107,33,8,32,0,183,32,6,183,32,5,183,164,68,0,0,0,0,0,0,34,64,162,161,33,9,32,0,65,9,107,33,3,3,64,32,9,32,3,183,101,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,9,107,33,3,12,2,11,11,11,32,0,183,32,6,183,32,8,183,164,68,0,0,0,0,0,0,28,64,162,161,33,9,32,0,65,7,107,33,3,3,64,32,9,32,3,183,101,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,7,107,33,3,12,2,11,11,11,32,0,183,32,7,183,32,5,183,164,68,0,0,0,0,0,0,28,64,162,160,33,9,32,0,65,7,106,33,3,3,64,32,9,32,3,183,102,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,7,106,33,3,12,2,11,11,11,32,0,183,32,7,183,32,8,183,164,68,0,0,0,0,0,0,34,64,162,160,33,9,32,0,65,9,106,33,3,3,64,32,9,32,3,183,102,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,9,106,33,3,12,2,11,11,11,32,0,32,6,65,3,116,107,33,6,32,0,65,8,107,33,3,3,64,32,3,192,32,6,192,78,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,8,107,33,3,12,2,11,11,11,32,0,32,8,106,33,6,32,0,65,1,106,33,3,3,64,32,3,192,32,6,192,76,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,1,106,33,3,12,2,11,11,11,32,7,65,3,116,32,0,106,33,6,32,0,65,8,106,33,3,3,64,32,3,192,32,6,192,76,4,64,2,64,2,64,32,1,32,3,192,16,14,69,4,64,32,4,32,4,40,2,12,32,3,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,192,16,16,11,12,1,11,32,3,65,8,106,33,3,12,2,11,11,11,32,0,32,5,107,33,3,32,0,65,1,107,33,0,3,64,32,0,192,32,3,192,78,4,64,2,64,2,64,32,1,32,0,192,16,14,69,4,64,32,4,32,4,40,2,12,32,0,192,16,16,12,1,11,32,2,65,255,1,113,32,1,32,0,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,0,192,16,16,11,12,1,11,32,0,65,1,107,33,0,12,2,11,11,11,35,13,65,4,106,36,13,32,4,11,205,10,2,8,127,1,124,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,65,0,54,2,0,32,1,192,65,3,118,33,4,32,1,65,7,113,33,5,2,64,32,2,65,255,1,113,4,64,32,4,192,65,1,74,4,64,32,5,65,7,73,4,127,32,0,32,1,65,7,107,192,16,14,65,1,70,5,65,0,11,13,2,32,5,4,127,32,0,32,1,65,9,107,192,16,14,65,1,70,5,65,0,11,13,2,11,5,32,4,192,65,6,72,4,64,32,5,4,127,32,0,32,1,65,7,106,192,16,14,65,9,70,5,65,0,11,13,2,32,5,65,7,73,4,127,32,0,32,1,65,9,106,192,16,14,65,9,70,5,65,0,11,13,2,11,11,35,13,32,1,32,0,32,2,16,48,34,5,54,2,0,32,5,40,2,12,33,6,3,64,32,3,32,6,72,4,64,32,0,32,5,32,3,16,17,16,14,65,7,113,65,3,70,13,2,32,3,65,1,106,33,3,12,1,11,11,65,7,32,4,192,107,33,8,65,7,32,1,65,7,113,34,5,107,33,3,32,2,65,1,115,65,3,116,34,2,65,2,106,33,9,32,2,65,4,106,33,10,32,2,65,5,106,33,6,32,2,65,6,106,33,7,32,1,183,32,4,183,32,5,183,164,68,0,0,0,0,0,0,34,64,162,161,33,11,32,1,65,9,107,33,2,3,64,32,11,32,2,183,101,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,9,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,6,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,9,107,65,255,1,113,70,5,65,0,11,13,4,12,1,11,32,2,65,9,107,33,2,12,2,11,11,11,32,1,183,32,4,183,32,3,183,164,68,0,0,0,0,0,0,28,64,162,161,33,11,32,1,65,7,107,33,2,3,64,32,11,32,2,183,101,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,9,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,6,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,7,107,65,255,1,113,70,5,65,0,11,13,4,12,1,11,32,2,65,7,107,33,2,12,2,11,11,11,32,1,183,32,8,183,32,5,183,164,68,0,0,0,0,0,0,28,64,162,160,33,11,32,1,65,7,106,33,2,3,64,32,11,32,2,183,102,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,9,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,6,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,7,106,65,255,1,113,70,5,65,0,11,13,4,12,1,11,32,2,65,7,106,33,2,12,2,11,11,11,32,1,183,32,8,183,32,3,183,164,68,0,0,0,0,0,0,34,64,162,160,33,11,32,1,65,9,106,33,2,3,64,32,11,32,2,183,102,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,9,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,6,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,9,106,65,255,1,113,70,5,65,0,11,13,4,12,1,11,32,2,65,9,106,33,2,12,2,11,11,11,32,1,32,4,65,3,116,107,33,4,32,1,65,8,107,33,2,3,64,32,2,192,32,4,192,78,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,10,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,6,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,8,107,65,255,1,113,70,5,65,0,11,13,4,12,1,11,32,2,65,8,107,33,2,12,2,11,11,11,32,3,32,1,192,106,33,3,32,1,65,1,106,33,2,3,64,32,3,32,2,192,78,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,10,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,6,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,1,106,65,255,1,113,70,5,65,0,11,13,4,12,1,11,32,2,65,1,106,33,2,12,2,11,11,11,32,1,192,32,8,65,3,116,106,33,3,32,1,65,8,106,33,2,3,64,32,3,32,2,192,78,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,10,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,6,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,8,106,65,255,1,113,70,5,65,0,11,13,4,12,1,11,32,2,65,8,106,33,2,12,2,11,11,11,32,1,32,5,107,33,3,32,1,65,1,107,33,2,3,64,32,2,192,32,3,192,78,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,10,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,6,65,255,1,113,70,13,4,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,1,107,65,255,1,113,70,5,65,0,11,13,4,12,1,11,32,2,65,1,107,33,2,12,2,11,11,11,35,13,65,4,106,36,13,65,0,15,11,35,13,65,4,106,36,13,65,1,11,188,7,1,5,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,1,65,4,65,208,15,16,45,34,4,54,2,0,32,0,65,255,1,113,65,3,118,34,5,65,7,73,33,6,32,0,65,7,113,34,7,65,0,71,33,3,32,7,65,7,73,33,7,32,5,4,64,32,1,32,0,65,8,107,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,1,11,4,64,32,4,32,4,40,2,12,32,5,65,255,1,113,16,16,11,32,3,4,64,32,1,32,0,65,9,107,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,1,11,4,64,32,4,32,4,40,2,12,32,5,65,255,1,113,16,16,11,11,32,7,4,64,32,1,32,0,65,7,107,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,1,11,4,64,32,4,32,4,40,2,12,32,5,65,255,1,113,16,16,11,11,11,32,6,4,64,32,1,32,0,65,8,106,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,1,11,4,64,32,4,32,4,40,2,12,32,5,65,255,1,113,16,16,11,32,3,4,64,32,1,32,0,65,7,106,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,1,11,4,64,32,4,32,4,40,2,12,32,5,65,255,1,113,16,16,11,11,32,7,4,64,32,1,32,0,65,9,106,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,1,11,4,64,32,4,32,4,40,2,12,32,5,65,255,1,113,16,16,11,11,11,32,3,4,64,32,1,32,0,65,1,107,34,3,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,3,65,255,1,113,16,14,65,3,118,71,5,65,1,11,4,64,32,4,32,4,40,2,12,32,3,65,255,1,113,16,16,11,11,32,7,4,64,32,1,32,0,65,1,106,34,0,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,0,65,255,1,113,16,14,65,3,118,71,5,65,1,11,4,64,32,4,32,4,40,2,12,32,0,65,255,1,113,16,16,11,11,2,64,32,1,65,193,0,16,14,69,13,0,32,2,65,255,1,113,4,64,32,1,65,60,65,1,16,51,13,1,32,1,65,193,0,16,14,65,8,113,65,8,70,4,127,32,1,65,61,16,14,5,65,1,11,4,127,65,1,5,32,1,65,62,16,14,11,4,127,65,1,5,32,1,65,61,65,1,16,51,11,69,4,64,32,4,32,4,40,2,12,65,62,16,16,11,32,1,65,193,0,16,14,65,4,113,65,4,70,4,127,32,1,65,59,16,14,5,65,1,11,4,127,65,1,5,32,1,65,58,16,14,11,4,127,65,1,5,32,1,65,57,16,14,11,4,127,65,1,5,32,1,65,59,65,1,16,51,11,69,4,64,32,4,32,4,40,2,12,65,58,16,16,11,5,32,1,65,4,65,0,16,51,13,1,32,1,65,193,0,16,14,65,2,113,65,2,70,4,127,32,1,65,5,16,14,5,65,1,11,4,127,65,1,5,32,1,65,6,16,14,11,4,127,65,1,5,32,1,65,5,65,0,16,51,11,69,4,64,32,4,32,4,40,2,12,65,6,16,16,11,32,1,65,193,0,16,14,65,1,113,4,127,32,1,65,3,16,14,5,65,1,11,4,127,65,1,5,32,1,65,1,16,14,11,4,127,65,1,5,32,1,65,2,16,14,11,4,127,65,1,5,32,1,65,3,65,0,16,51,11,69,4,64,32,4,32,4,40,2,12,65,2,16,16,11,11,35,13,65,4,106,36,13,32,4,15,11,35,13,65,4,106,36,13,32,4,11,245,3,1,4,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,0,65,9,65,176,17,16,45,34,5,54,2,0,32,0,192,65,3,118,33,4,32,0,65,7,113,34,6,65,7,73,33,3,32,6,65,0,71,33,6,32,2,65,255,1,113,4,64,32,3,4,64,32,1,32,0,65,7,107,34,2,65,255,1,113,16,14,4,64,32,1,32,2,65,255,1,113,16,14,65,3,118,69,4,64,32,5,32,5,40,2,12,32,2,16,19,11,5,32,4,65,255,1,113,65,3,70,4,127,32,1,65,194,0,16,14,32,2,65,255,1,113,70,5,65,0,11,4,64,32,5,32,5,40,2,12,32,2,16,19,11,11,11,32,6,4,64,32,1,32,0,65,9,107,34,0,65,255,1,113,16,14,4,64,32,1,32,0,65,255,1,113,16,14,65,3,118,69,4,64,32,5,32,5,40,2,12,32,0,16,19,11,5,32,4,65,255,1,113,65,3,70,4,127,32,1,65,194,0,16,14,32,0,65,255,1,113,70,5,65,0,11,4,64,32,5,32,5,40,2,12,32,0,16,19,11,11,11,35,13,65,4,106,36,13,32,5,15,11,32,3,4,64,32,1,32,0,65,9,106,34,2,65,255,1,113,16,14,4,64,32,1,32,2,65,255,1,113,16,14,65,3,118,65,1,70,4,64,32,5,32,5,40,2,12,32,2,16,19,11,5,32,4,65,255,1,113,65,4,70,4,127,32,1,65,194,0,16,14,32,2,65,255,1,113,70,5,65,0,11,4,64,32,5,32,5,40,2,12,32,2,16,19,11,11,11,32,6,4,64,32,1,32,0,65,7,106,34,0,65,255,1,113,16,14,4,64,32,1,32,0,65,255,1,113,16,14,65,3,118,65,1,70,4,64,32,5,32,5,40,2,12,32,0,16,19,11,5,32,4,65,255,1,113,65,4,70,4,127,32,1,65,194,0,16,14,32,0,65,255,1,113,70,5,65,0,11,4,64,32,5,32,5,40,2,12,32,0,16,19,11,11,11,35,13,65,4,106,36,13,32,5,11,231,3,2,6,127,1,124,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,0,65,9,65,240,17,16,45,34,4,54,2,0,65,7,32,0,192,65,3,118,34,5,192,107,33,6,65,7,32,0,65,7,113,34,7,107,33,8,32,0,183,32,5,183,32,7,183,164,68,0,0,0,0,0,0,34,64,162,161,33,9,32,0,65,9,107,33,3,3,64,32,9,32,3,183,101,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,9,107,33,3,12,2,11,11,11,32,0,183,32,5,183,32,8,183,164,68,0,0,0,0,0,0,28,64,162,161,33,9,32,0,65,7,107,33,3,3,64,32,9,32,3,183,101,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,7,107,33,3,12,2,11,11,11,32,0,183,32,6,183,32,7,183,164,68,0,0,0,0,0,0,28,64,162,160,33,9,32,0,65,7,106,33,3,3,64,32,9,32,3,183,102,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,7,106,33,3,12,2,11,11,11,32,0,183,32,6,183,32,8,183,164,68,0,0,0,0,0,0,34,64,162,160,33,9,32,0,65,9,106,33,3,3,64,32,9,32,3,183,102,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,9,106,33,3,12,2,11,11,11,35,13,65,4,106,36,13,32,4,11,219,4,1,9,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,0,65,9,65,176,18,16,45,34,7,54,2,0,32,0,65,7,113,34,5,65,1,75,34,8,32,5,65,0,71,32,8,27,33,4,32,5,65,6,73,34,3,32,5,65,7,73,32,3,27,33,5,32,0,192,65,3,118,192,34,9,65,1,74,34,10,32,9,65,0,74,32,10,27,33,6,32,9,65,6,72,34,11,32,9,65,7,72,32,11,27,33,9,32,10,4,64,32,4,4,64,32,1,32,0,65,17,107,34,10,192,16,14,4,127,32,2,65,255,1,113,32,1,32,10,192,16,14,65,3,118,71,5,65,0,11,4,64,32,7,32,7,40,2,12,32,10,16,19,11,11,32,5,4,64,32,1,32,0,65,15,107,34,10,192,16,14,4,127,32,2,65,255,1,113,32,1,32,10,192,16,14,65,3,118,71,5,65,0,11,4,64,32,7,32,7,40,2,12,32,10,16,19,11,11,11,32,11,4,64,32,4,4,64,32,1,32,0,65,15,106,34,4,192,16,14,4,127,32,2,65,255,1,113,32,1,32,4,192,16,14,65,3,118,71,5,65,0,11,4,64,32,7,32,7,40,2,12,32,4,16,19,11,11,32,5,4,64,32,1,32,0,65,17,106,34,4,192,16,14,4,127,32,2,65,255,1,113,32,1,32,4,192,16,14,65,3,118,71,5,65,0,11,4,64,32,7,32,7,40,2,12,32,4,16,19,11,11,11,32,8,4,64,32,6,4,64,32,1,32,0,65,10,107,34,4,192,16,14,4,127,32,2,65,255,1,113,32,1,32,4,192,16,14,65,3,118,71,5,65,0,11,4,64,32,7,32,7,40,2,12,32,4,16,19,11,11,32,9,4,64,32,1,32,0,65,6,106,34,4,192,16,14,4,127,32,2,65,255,1,113,32,1,32,4,192,16,14,65,3,118,71,5,65,0,11,4,64,32,7,32,7,40,2,12,32,4,16,19,11,11,11,32,3,4,64,32,6,4,64,32,1,32,0,65,6,107,34,3,192,16,14,4,127,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,5,65,0,11,4,64,32,7,32,7,40,2,12,32,3,16,19,11,11,32,9,4,64,32,1,32,0,65,10,106,34,0,192,16,14,4,127,32,2,65,255,1,113,32,1,32,0,192,16,14,65,3,118,71,5,65,0,11,4,64,32,7,32,7,40,2,12,32,0,16,19,11,11,11,35,13,65,4,106,36,13,32,7,11,174,3,1,6,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,0,65,9,65,240,18,16,45,34,4,54,2,0,65,7,32,0,192,65,3,118,34,3,107,33,6,65,7,32,0,65,7,113,34,5,107,33,7,32,0,32,3,65,3,116,107,33,8,32,0,65,8,107,33,3,3,64,32,3,192,32,8,192,78,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,8,107,33,3,12,2,11,11,11,32,0,32,7,106,33,7,32,0,65,1,106,33,3,3,64,32,3,192,32,7,192,76,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,1,106,33,3,12,2,11,11,11,32,6,65,3,116,32,0,106,33,6,32,0,65,8,106,33,3,3,64,32,3,192,32,6,192,76,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,8,106,33,3,12,2,11,11,11,32,0,32,5,107,33,3,32,0,65,1,107,33,0,3,64,32,0,192,32,3,192,78,4,64,2,64,32,1,32,0,192,16,14,4,64,32,2,65,255,1,113,32,1,32,0,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,0,16,19,11,12,1,11,32,0,65,1,107,33,0,12,2,11,11,11,35,13,65,4,106,36,13,32,4,11,180,6,2,6,127,1,124,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,0,65,9,65,176,19,16,45,34,4,54,2,0,65,7,32,0,192,65,3,118,34,6,107,33,7,65,7,32,0,65,7,113,34,5,107,33,8,32,0,183,32,6,183,32,5,183,164,68,0,0,0,0,0,0,34,64,162,161,33,9,32,0,65,9,107,33,3,3,64,32,9,32,3,183,101,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,9,107,33,3,12,2,11,11,11,32,0,183,32,6,183,32,8,183,164,68,0,0,0,0,0,0,28,64,162,161,33,9,32,0,65,7,107,33,3,3,64,32,9,32,3,183,101,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,7,107,33,3,12,2,11,11,11,32,0,183,32,7,183,32,5,183,164,68,0,0,0,0,0,0,28,64,162,160,33,9,32,0,65,7,106,33,3,3,64,32,9,32,3,183,102,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,7,106,33,3,12,2,11,11,11,32,0,183,32,7,183,32,8,183,164,68,0,0,0,0,0,0,34,64,162,160,33,9,32,0,65,9,106,33,3,3,64,32,9,32,3,183,102,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,9,106,33,3,12,2,11,11,11,32,0,32,6,65,3,116,107,33,6,32,0,65,8,107,33,3,3,64,32,3,192,32,6,192,78,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,8,107,33,3,12,2,11,11,11,32,0,32,8,106,33,6,32,0,65,1,106,33,3,3,64,32,3,192,32,6,192,76,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,1,106,33,3,12,2,11,11,11,32,7,65,3,116,32,0,106,33,6,32,0,65,8,106,33,3,3,64,32,3,192,32,6,192,76,4,64,2,64,32,1,32,3,192,16,14,4,64,32,2,65,255,1,113,32,1,32,3,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,3,16,19,11,12,1,11,32,3,65,8,106,33,3,12,2,11,11,11,32,0,32,5,107,33,3,32,0,65,1,107,33,0,3,64,32,0,192,32,3,192,78,4,64,2,64,32,1,32,0,192,16,14,4,64,32,2,65,255,1,113,32,1,32,0,192,16,14,65,3,118,71,4,64,32,4,32,4,40,2,12,32,0,16,19,11,12,1,11,32,0,65,1,107,33,0,12,2,11,11,11,35,13,65,4,106,36,13,32,4,11,202,4,1,5,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,3,65,0,54,2,0,32,3,65,0,65,0,65,9,65,240,19,16,45,34,4,54,2,0,32,0,65,255,1,113,65,3,118,34,5,65,7,73,33,6,32,0,65,7,113,34,7,65,0,71,33,3,32,7,65,7,73,33,7,32,5,4,64,32,1,32,0,65,8,107,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,0,11,4,64,32,4,32,4,40,2,12,32,5,16,19,11,32,3,4,64,32,1,32,0,65,9,107,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,0,11,4,64,32,4,32,4,40,2,12,32,5,16,19,11,11,32,7,4,64,32,1,32,0,65,7,107,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,0,11,4,64,32,4,32,4,40,2,12,32,5,16,19,11,11,11,32,6,4,64,32,1,32,0,65,8,106,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,0,11,4,64,32,4,32,4,40,2,12,32,5,16,19,11,32,3,4,64,32,1,32,0,65,7,106,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,0,11,4,64,32,4,32,4,40,2,12,32,5,16,19,11,11,32,7,4,64,32,1,32,0,65,9,106,34,5,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,5,65,255,1,113,16,14,65,3,118,71,5,65,0,11,4,64,32,4,32,4,40,2,12,32,5,16,19,11,11,11,32,3,4,64,32,1,32,0,65,1,107,34,3,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,3,65,255,1,113,16,14,65,3,118,71,5,65,0,11,4,64,32,4,32,4,40,2,12,32,3,16,19,11,11,32,7,4,64,32,1,32,0,65,1,106,34,0,65,255,1,113,16,14,4,127,32,2,65,255,1,113,32,1,32,0,65,255,1,113,16,14,65,3,118,71,5,65,0,11,4,64,32,4,32,4,40,2,12,32,0,16,19,11,11,35,13,65,4,106,36,13,32,4,11,174,8,1,8,127,35,13,65,4,107,36,13,2,64,2,64,35,13,65,164,32,72,13,0,35,13,34,5,65,0,54,2,0,32,5,65,4,107,36,13,35,13,65,164,32,72,13,0,32,0,65,255,255,3,113,65,10,118,33,4,32,0,65,63,113,33,2,35,13,34,3,65,0,54,2,0,65,0,32,1,40,2,8,34,7,32,7,65,0,74,27,33,6,32,7,32,6,107,34,7,65,0,32,7,65,0,74,27,33,9,32,3,2,127,32,3,65,4,107,36,13,2,64,35,13,65,164,32,72,13,0,35,13,34,3,65,0,54,2,0,32,3,65,12,65,3,16,12,34,3,54,2,0,35,13,34,7,65,8,107,36,13,35,13,65,164,32,72,13,0,35,13,66,0,55,3,0,32,3,69,4,64,35,13,65,12,65,2,16,12,34,3,54,2,0,11,32,3,65,0,54,2,0,32,3,65,0,54,2,4,32,3,65,0,54,2,8,32,9,65,252,255,255,255,3,75,4,64,65,128,13,65,240,24,65,19,65,57,16,0,0,11,35,13,32,9,65,0,16,12,34,8,54,2,4,32,3,32,8,54,2,0,32,8,4,64,32,3,32,8,65,0,16,90,11,32,3,32,8,54,2,4,32,3,32,9,54,2,8,35,13,65,8,106,36,13,32,7,32,3,54,2,0,35,13,65,4,106,36,13,32,3,12,1,11,12,2,11,34,3,54,2,0,32,3,40,2,4,32,6,32,1,40,2,4,106,32,9,252,10,0,0,35,13,65,4,106,36,13,32,5,32,3,54,2,0,32,3,32,2,32,3,32,4,16,14,16,29,32,3,32,4,65,0,16,29,32,3,65,192,0,32,1,65,192,0,16,14,65,1,115,65,255,1,113,16,29,2,64,2,64,2,64,2,64,2,64,32,1,32,4,16,14,65,7,113,65,1,107,14,6,0,3,3,1,3,2,3,11,32,1,65,194,0,16,14,32,2,70,4,64,32,3,32,2,65,8,106,32,2,65,8,107,32,1,65,192,0,16,14,27,65,255,1,113,65,0,16,29,11,32,3,65,194,0,65,0,16,29,32,2,32,4,107,65,255,1,113,65,16,70,4,64,32,3,65,194,0,32,2,65,8,107,65,255,1,113,16,29,11,32,4,32,2,107,65,255,1,113,65,16,70,4,64,32,3,65,194,0,32,2,65,8,106,16,29,11,32,2,65,3,118,69,4,64,32,3,32,2,32,0,65,255,255,3,113,65,6,118,65,15,113,16,29,11,32,2,65,3,118,65,7,70,4,64,32,3,32,2,32,0,65,255,255,3,113,65,6,118,65,15,113,16,29,11,12,3,11,32,3,65,194,0,65,0,16,29,32,1,65,193,0,16,14,69,13,2,32,4,65,63,70,4,64,32,3,65,193,0,32,1,65,193,0,16,14,65,7,113,16,29,11,32,4,65,56,70,4,64,32,3,65,193,0,32,1,65,193,0,16,14,65,11,113,16,29,11,32,4,65,7,70,4,64,32,3,65,193,0,32,1,65,193,0,16,14,65,13,113,16,29,11,32,4,69,4,64,32,3,65,193,0,32,1,65,193,0,16,14,65,14,113,16,29,11,12,2,11,32,3,65,194,0,65,0,16,29,32,1,65,193,0,16,14,69,13,1,32,4,65,4,70,4,64,32,3,65,193,0,32,1,65,193,0,16,14,65,12,113,16,29,32,2,65,2,70,4,64,32,3,65,3,65,4,16,29,32,3,65,0,65,0,16,29,12,3,11,32,2,65,6,70,4,64,32,3,65,5,65,4,16,29,32,3,65,7,65,0,16,29,12,3,11,11,32,4,65,60,70,4,64,32,3,65,193,0,32,1,65,193,0,16,14,65,3,113,16,29,32,2,65,58,70,4,64,32,3,65,59,65,12,16,29,32,3,65,56,65,0,16,29,12,3,11,32,2,65,62,70,4,64,32,3,65,61,65,12,16,29,32,3,65,63,65,0,16,29,12,3,11,11,12,1,11,32,3,65,194,0,65,0,16,29,11,32,1,32,2,16,14,65,4,70,4,64,32,3,65,0,16,14,65,4,71,4,64,32,3,65,193,0,32,3,65,193,0,16,14,65,14,113,16,29,11,32,3,65,7,16,14,65,4,71,4,64,32,3,65,193,0,32,3,65,193,0,16,14,65,13,113,16,29,11,11,32,1,32,2,16,14,65,12,70,4,64,32,3,65,56,16,14,65,12,71,4,64,32,3,65,193,0,32,3,65,193,0,16,14,65,11,113,16,29,11,32,3,65,63,16,14,65,12,71,4,64,32,3,65,193,0,32,3,65,193,0,16,14,65,7,113,16,29,11,11,35,13,65,4,106,36,13,32,3,15,11,11,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,115,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,65,0,54,2,0,32,0,40,2,12,32,1,77,4,64,65,128,10,65,208,12,65,242,0,65,42,16,0,0,11,35,13,32,0,40,2,4,32,1,65,2,116,106,40,2,0,34,0,54,2,0,32,0,69,4,64,65,240,25,65,208,12,65,246,0,65,40,16,0,0,11,35,13,65,4,106,36,13,32,0,11,184,2,1,9,127,35,13,65,12,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,1,66,0,55,3,0,32,1,65,0,54,2,8,32,1,65,0,65,1,65,4,65,240,26,16,45,34,4,54,2,0,35,13,32,0,16,41,34,5,54,2,4,32,5,4,64,32,5,40,2,12,33,8,3,64,32,6,32,8,72,4,64,35,13,32,5,32,6,16,17,32,0,16,59,34,3,54,2,8,32,3,2,127,32,0,65,192,0,16,14,65,3,116,65,6,106,33,9,65,0,33,2,65,127,33,1,2,64,32,3,40,2,8,34,7,65,0,76,65,1,32,7,27,13,0,32,3,40,2,4,33,3,3,64,32,2,32,7,72,4,64,32,2,34,1,32,3,106,45,0,0,32,9,65,255,1,113,70,13,2,32,1,65,1,106,33,2,12,1,11,11,65,127,33,1,11,32,1,11,32,0,65,192,0,16,14,16,51,69,4,64,32,5,32,6,16,17,33,3,32,4,32,4,40,2,12,34,2,65,1,106,34,1,65,1,65,1,16,15,32,4,40,2,4,32,2,65,1,116,106,32,3,59,1,0,32,4,32,1,54,2,12,11,32,6,65,1,106,33,6,12,1,11,11,35,13,65,12,106,36,13,32,4,15,11,35,13,65,12,106,36,13,65,0,11,157,1,1,3,127,35,13,65,8,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,1,66,0,55,3,0,32,1,65,5,65,1,65,4,65,0,16,45,34,3,54,2,0,35,13,32,3,40,2,4,54,2,4,32,3,40,2,4,32,0,192,65,3,118,34,2,192,59,1,0,32,3,40,2,4,32,0,65,7,113,34,1,59,1,2,32,3,40,2,4,65,7,32,2,107,192,59,1,4,32,3,40,2,4,65,7,32,1,107,192,59,1,6,32,3,40,2,4,32,0,32,2,65,3,116,107,192,59,1,8,35,13,65,8,106,36,13,32,3,11,177,13,2,9,127,1,124,35,13,65,8,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,4,66,0,55,3,0,32,4,65,0,65,1,65,13,65,160,28,16,45,34,8,54,2,0,32,1,192,65,3,118,33,4,32,2,65,255,1,113,4,64,32,4,65,255,1,113,65,1,75,4,64,32,0,32,1,65,7,107,192,16,14,65,1,70,4,64,32,8,32,8,40,2,12,65,228,0,16,16,11,32,0,32,1,65,9,107,192,16,14,65,1,70,4,64,32,8,32,8,40,2,12,65,228,0,16,16,11,11,5,32,4,65,255,1,113,65,6,73,4,64,32,0,32,1,65,7,106,192,16,14,65,9,70,4,64,32,8,32,8,40,2,12,65,228,0,16,16,11,32,0,32,1,65,9,106,192,16,14,65,9,70,4,64,32,8,32,8,40,2,12,65,228,0,16,16,11,11,11,35,13,32,1,32,0,32,2,16,48,34,5,54,2,4,32,5,40,2,12,33,6,3,64,32,3,65,255,1,113,32,6,65,255,1,113,73,4,64,32,0,32,5,32,3,65,255,1,113,16,17,16,14,65,7,113,65,3,70,4,64,32,8,32,8,40,2,12,65,177,2,16,16,11,32,3,65,1,106,33,3,12,1,11,11,65,7,32,4,107,33,9,65,7,32,1,65,7,113,34,5,107,33,3,32,2,65,1,115,65,3,116,34,2,65,2,106,33,10,32,2,65,4,106,33,11,32,2,65,5,106,33,6,32,2,65,6,106,33,7,32,1,183,32,4,184,32,5,184,164,68,0,0,0,0,0,0,34,64,162,161,33,12,32,1,65,9,107,33,2,3,64,32,12,32,2,183,101,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,10,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,205,2,16,16,11,32,0,32,2,192,16,14,32,6,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,182,7,16,16,11,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,9,107,65,255,1,113,70,5,65,0,11,4,64,32,8,32,8,40,2,12,65,220,11,16,16,11,12,1,11,32,2,65,9,107,33,2,12,2,11,11,11,32,1,183,32,4,184,32,3,184,164,68,0,0,0,0,0,0,28,64,162,161,33,12,32,1,65,7,107,33,2,3,64,32,12,32,2,183,101,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,10,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,205,2,16,16,11,32,0,32,2,192,16,14,32,6,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,182,7,16,16,11,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,7,107,65,255,1,113,70,5,65,0,11,4,64,32,8,32,8,40,2,12,65,220,11,16,16,11,12,1,11,32,2,65,7,107,33,2,12,2,11,11,11,32,1,183,32,9,184,32,5,184,164,68,0,0,0,0,0,0,28,64,162,160,33,12,32,1,65,7,106,33,2,3,64,32,12,32,2,183,102,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,10,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,205,2,16,16,11,32,0,32,2,192,16,14,32,6,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,182,7,16,16,11,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,7,106,65,255,1,113,70,5,65,0,11,4,64,32,8,32,8,40,2,12,65,220,11,16,16,11,12,1,11,32,2,65,7,106,33,2,12,2,11,11,11,32,1,183,32,9,184,32,3,184,164,68,0,0,0,0,0,0,34,64,162,160,33,12,32,1,65,9,106,33,2,3,64,32,12,32,2,183,102,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,10,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,205,2,16,16,11,32,0,32,2,192,16,14,32,6,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,182,7,16,16,11,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,9,106,65,255,1,113,70,5,65,0,11,4,64,32,8,32,8,40,2,12,65,220,11,16,16,11,12,1,11,32,2,65,9,106,33,2,12,2,11,11,11,32,1,32,4,65,3,116,107,33,4,32,1,65,8,107,33,2,3,64,32,2,192,32,4,192,78,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,11,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,179,4,16,16,11,32,0,32,2,192,16,14,32,6,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,182,7,16,16,11,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,8,107,65,255,1,113,70,5,65,0,11,4,64,32,8,32,8,40,2,12,65,220,11,16,16,11,12,1,11,32,2,65,8,107,33,2,12,2,11,11,11,32,1,32,3,106,33,3,32,1,65,1,106,33,2,3,64,32,2,192,32,3,192,76,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,11,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,179,4,16,16,11,32,0,32,2,192,16,14,32,6,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,182,7,16,16,11,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,1,106,65,255,1,113,70,5,65,0,11,4,64,32,8,32,8,40,2,12,65,220,11,16,16,11,12,1,11,32,2,65,1,106,33,2,12,2,11,11,11,32,9,65,3,116,32,1,106,33,3,32,1,65,8,106,33,2,3,64,32,2,192,32,3,192,76,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,11,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,179,4,16,16,11,32,0,32,2,192,16,14,32,6,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,182,7,16,16,11,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,8,106,65,255,1,113,70,5,65,0,11,4,64,32,8,32,8,40,2,12,65,220,11,16,16,11,12,1,11,32,2,65,8,106,33,2,12,2,11,11,11,32,1,32,5,107,33,3,32,1,65,1,107,33,2,3,64,32,2,192,32,3,192,78,4,64,2,64,32,0,32,2,192,16,14,4,64,32,0,32,2,192,16,14,32,11,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,179,4,16,16,11,32,0,32,2,192,16,14,32,6,65,255,1,113,70,4,64,32,8,32,8,40,2,12,65,182,7,16,16,11,32,0,32,2,192,16,14,32,7,65,255,1,113,70,4,127,32,2,65,255,1,113,32,1,65,1,107,65,255,1,113,70,5,65,0,11,4,64,32,8,32,8,40,2,12,65,220,11,16,16,11,12,1,11,32,2,65,1,107,33,2,12,2,11,11,11,35,13,65,8,106,36,13,32,8,11,87,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,65,0,54,2,0,32,0,65,252,255,255,255,3,75,4,64,65,128,13,65,240,24,65,52,65,43,16,0,0,11,35,13,32,0,65,0,16,12,34,0,54,2,0,35,13,65,4,106,36,13,32,0,11,142,1,1,2,127,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,34,0,65,0,54,2,0,32,0,65,24,65,14,16,12,34,0,54,2,0,32,0,65,16,16,64,34,1,54,2,0,32,1,4,64,32,0,32,1,65,0,16,90,11,32,0,65,3,54,2,4,32,0,65,48,16,64,34,1,54,2,8,32,1,4,64,32,0,32,1,65,0,16,90,11,32,0,65,4,54,2,12,32,0,65,0,54,2,16,32,0,65,0,54,2,20,35,13,65,4,106,36,13,32,0,11,181,5,1,9,127,35,13,65,4,107,36,13,2,64,35,13,65,164,32,72,13,0,35,13,65,0,54,2,0,32,0,40,2,0,32,1,65,255,1,113,65,189,220,202,149,124,108,65,178,207,217,178,1,106,65,17,119,65,175,214,211,190,2,108,34,3,65,15,118,32,3,115,65,247,148,175,175,120,108,34,3,65,13,118,32,3,115,65,189,220,202,149,124,108,34,3,65,16,118,32,3,115,34,8,32,0,40,2,4,113,65,2,116,106,40,2,0,33,3,2,64,3,64,32,3,4,64,32,3,40,2,8,34,4,65,1,113,4,127,65,0,5,32,3,45,0,0,32,1,65,255,1,113,70,11,13,2,32,4,65,126,113,33,3,12,1,11,11,65,0,33,3,11,32,3,4,64,32,3,32,2,54,2,4,32,2,4,64,32,0,32,2,65,1,16,90,11,5,32,0,40,2,16,32,0,40,2,12,70,4,64,32,0,40,2,20,32,0,40,2,12,65,3,108,65,4,109,72,4,127,32,0,40,2,4,5,32,0,40,2,4,65,1,116,65,1,114,11,33,5,35,13,65,8,107,36,13,35,13,65,164,32,72,13,2,35,13,34,3,66,0,55,3,0,32,3,32,5,65,1,106,34,3,65,2,116,16,64,34,9,54,2,0,35,13,32,3,65,3,116,65,3,109,34,7,65,12,108,16,64,34,4,54,2,4,32,0,40,2,8,34,10,32,0,40,2,16,65,12,108,106,33,6,32,4,33,3,3,64,32,6,32,10,71,4,64,32,10,40,2,8,65,1,113,69,4,64,32,3,32,10,45,0,0,34,11,58,0,0,32,3,32,10,40,2,4,54,2,4,32,3,32,11,65,189,220,202,149,124,108,65,178,207,217,178,1,106,65,17,119,65,175,214,211,190,2,108,34,11,65,15,118,32,11,115,65,247,148,175,175,120,108,34,11,65,13,118,32,11,115,65,189,220,202,149,124,108,34,11,65,16,118,32,11,115,32,5,113,65,2,116,32,9,106,34,11,40,2,0,54,2,8,32,11,32,3,54,2,0,32,3,65,12,106,33,3,11,32,10,65,12,106,33,10,12,1,11,11,32,0,32,9,54,2,0,32,9,4,64,32,0,32,9,65,0,16,90,11,32,0,32,5,54,2,4,32,0,32,4,54,2,8,32,4,4,64,32,0,32,4,65,0,16,90,11,32,0,32,7,54,2,12,32,0,32,0,40,2,20,54,2,16,35,13,65,8,106,36,13,11,35,13,32,0,40,2,8,34,3,54,2,0,32,0,32,0,40,2,16,34,4,65,1,106,54,2,16,32,4,65,12,108,32,3,106,34,3,32,1,58,0,0,32,3,32,2,54,2,4,32,2,4,64,32,0,32,2,65,1,16,90,11,32,0,32,0,40,2,20,65,1,106,54,2,20,32,3,32,0,40,2,0,32,0,40,2,4,32,8,113,65,2,116,106,34,0,40,2,0,54,2,8,32,0,32,3,54,2,0,11,35,13,65,4,106,36,13,15,11,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,176,3,2,1,125,4,127,35,13,65,20,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,65,0,65,20,252,11,0,2,64,32,1,65,255,1,113,69,4,64,32,0,32,4,16,44,33,0,12,1,11,35,13,32,0,16,41,34,7,54,2,0,2,64,32,7,4,64,32,0,65,192,0,16,14,4,64,67,128,79,195,199,32,1,179,147,33,5,32,7,40,2,12,33,8,3,64,32,6,32,8,72,4,64,2,64,35,13,32,7,32,6,16,17,32,0,16,59,34,9,54,2,4,35,13,32,9,32,1,65,1,107,32,2,32,3,32,4,16,67,34,9,54,2,8,32,9,65,0,16,32,67,0,0,0,0,91,4,64,32,3,32,5,187,32,9,65,1,16,32,187,165,182,34,5,95,13,1,32,2,187,32,5,187,165,182,33,2,11,32,6,65,1,106,33,6,12,2,11,11,11,12,2,11,32,1,179,67,128,79,195,71,146,33,5,32,7,40,2,12,33,8,3,64,32,6,32,8,72,4,64,2,64,35,13,32,7,32,6,16,17,32,0,16,59,34,9,54,2,8,35,13,32,9,32,1,65,1,107,32,2,32,3,32,4,16,67,34,9,54,2,4,32,9,65,0,16,32,67,0,0,0,0,91,4,64,32,2,32,5,187,32,9,65,1,16,32,187,164,182,34,5,96,13,1,32,3,187,32,5,187,164,182,33,3,11,32,6,65,1,106,33,6,12,2,11,11,11,12,1,11,65,2,65,2,65,17,65,128,30,16,45,33,0,35,13,65,20,106,36,13,32,0,15,11,35,13,65,2,65,2,65,17,65,0,16,45,34,0,54,2,12,35,13,32,0,40,2,4,54,2,16,32,0,40,2,4,67,0,0,0,0,56,2,0,32,0,40,2,4,32,5,56,2,4,11,35,13,65,20,106,36,13,32,0,11,57,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,16,59,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,46,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,53,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,48,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,55,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,30,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,31,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,50,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,57,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,47,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,54,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,49,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,32,2,16,56,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,0,54,2,0,32,0,32,1,32,2,16,51,33,0,35,13,65,4,106,36,13,32,0,11,55,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,0,54,2,0,32,0,16,41,33,0,35,13,65,4,106,36,13,32,0,11,57,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,1,54,2,0,32,0,32,1,16,42,33,0,35,13,65,4,106,36,13,32,0,11,55,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,0,54,2,0,32,0,16,61,33,0,35,13,65,4,106,36,13,32,0,11,57,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,0,54,2,0,32,0,32,1,16,43,33,0,35,13,65,4,106,36,13,32,0,11,59,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,0,54,2,0,32,0,32,1,32,2,16,63,33,0,35,13,65,4,106,36,13,32,0,11,84,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,0,54,2,0,2,64,2,64,2,64,35,10,65,1,107,14,2,1,2,0,11,0,11,67,0,0,0,0,33,1,11,32,0,32,1,16,44,33,0,35,13,65,4,106,36,13,32,0,11,112,0,35,13,65,4,107,36,13,35,13,65,164,32,72,4,64,65,192,160,1,65,240,160,1,65,1,65,1,16,0,0,11,35,13,32,0,54,2,0,2,64,2,64,2,64,2,64,2,64,35,10,65,2,107,14,4,1,2,3,4,0,11,0,11,67,128,79,195,199,33,2,11,67,128,79,195,71,33,3,11,67,0,0,0,0,33,4,11,32,0,32,1,32,2,32,3,32,4,16,67,33,0,35,13,65,4,106,36,13,32,0,11,32,0,35,7,32,0,65,20,107,34,0,40,2,4,65,3,113,70,4,64,32,0,16,3,35,3,65,1,106,36,3,11,11,92,1,1,127,32,0,69,4,64,65,0,65,128,9,65,166,2,65,14,16,0,0,11,35,7,32,1,65,20,107,34,1,40,2,4,65,3,113,70,4,64,32,0,65,20,107,34,0,40,2,4,65,3,113,34,3,35,7,69,70,4,64,32,0,32,1,32,2,27,16,3,5,35,2,65,1,70,32,3,65,3,70,113,4,64,32,1,16,3,11,11,11,11,11,200,15,115,0,65,140,8,11,1,28,0,65,172,8,11,1,60,0,65,184,8,11,47,1,0,0,0,40,0,0,0,65,0,108,0,108,0,111,0,99,0,97,0,116,0,105,0,111,0,110,0,32,0,116,0,111,0,111,0,32,0,108,0,97,0,114,0,103,0,101,0,65,236,8,11,1,60,0,65,248,8,11,39,1,0,0,0,32,0,0,0,126,0,108,0,105,0,98,0,47,0,114,0,116,0,47,0,105,0,116,0,99,0,109,0,115,0,46,0,116,0,115,0,65,236,9,11,1,60,0,65,248,9,11,43,1,0,0,0,36,0,0,0,73,0,110,0,100,0,101,0,120,0,32,0,111,0,117,0,116,0,32,0,111,0,102,0,32,0,114,0,97,0,110,0,103,0,101,0,65,172,10,11,1,44,0,65,184,10,11,27,1,0,0,0,20,0,0,0,126,0,108,0,105,0,98,0,47,0,114,0,116,0,46,0,116,0,115,0,65,252,10,11,1,60,0,65,136,11,11,37,1,0,0,0,30,0,0,0,126,0,108,0,105,0,98,0,47,0,114,0,116,0,47,0,116,0,108,0,115,0,102,0,46,0,116,0,115,0,65,188,11,11,1,28,0,65,200,11,11,9,7,0,0,0,8,0,0,0,1,0,65,220,11,11,1,28,0,65,252,11,11,1,60,0,65,136,12,11,43,1,0,0,0,36,0,0,0,126,0,108,0,105,0,98,0,47,0,116,0,121,0,112,0,101,0,100,0,97,0,114,0,114,0,97,0,121,0,46,0,116,0,115,0,65,188,12,11,1,44,0,65,200,12,11,33,1,0,0,0,26,0,0,0,126,0,108,0,105,0,98,0,47,0,97,0,114,0,114,0,97,0,121,0,46,0,116,0,115,0,65,236,12,11,1,44,0,65,248,12,11,35,1,0,0,0,28,0,0,0,73,0,110,0,118,0,97,0,108,0,105,0,100,0,32,0,108,0,101,0,110,0,103,0,116,0,104,0,65,156,13,11,1,28,0,65,168,13,11,9,7,0,0,0,8,0,0,0,2,0,65,188,13,11,1,28,0,65,220,13,11,1,28,0,65,232,13,11,9,7,0,0,0,8,0,0,0,3,0,65,252,13,11,1,28,0,65,156,14,11,1,28,0,65,168,14,11,9,7,0,0,0,8,0,0,0,4,0,65,188,14,11,1,28,0,65,220,14,11,1,28,0,65,232,14,11,9,7,0,0,0,8,0,0,0,5,0,65,252,14,11,1,28,0,65,156,15,11,1,28,0,65,168,15,11,9,7,0,0,0,8,0,0,0,6,0,65,188,15,11,1,28,0,65,220,15,11,1,28,0,65,232,15,11,9,8,0,0,0,8,0,0,0,7,0,65,252,15,11,1,44,0,65,140,16,11,30,28,0,0,0,208,5,0,0,176,6,0,0,240,6,0,0,48,7,0,0,112,7,0,0,176,7,0,0,240,7,0,65,172,16,11,1,44,0,65,184,16,11,21,5,0,0,0,16,0,0,0,16,8,0,0,16,8,0,0,28,0,0,0,7,0,65,220,16,11,1,28,0,65,252,16,11,1,28,0,65,136,17,11,9,11,0,0,0,8,0,0,0,8,0,65,156,17,11,1,28,0,65,188,17,11,1,28,0,65,200,17,11,9,11,0,0,0,8,0,0,0,9,0,65,220,17,11,1,28,0,65,252,17,11,1,28,0,65,136,18,11,9,11,0,0,0,8,0,0,0,10,0,65,156,18,11,1,28,0,65,188,18,11,1,28,0,65,200,18,11,9,11,0,0,0,8,0,0,0,11,0,65,220,18,11,1,28,0,65,252,18,11,1,28,0,65,136,19,11,9,11,0,0,0,8,0,0,0,12,0,65,156,19,11,1,28,0,65,188,19,11,1,28,0,65,200,19,11,9,11,0,0,0,8,0,0,0,13,0,65,220,19,11,1,28,0,65,252,19,11,1,28,0,65,136,20,11,9,12,0,0,0,8,0,0,0,14,0,65,156,20,11,1,44,0,65,172,20,11,30,28,0,0,0,144,8,0,0,208,8,0,0,16,9,0,0,80,9,0,0,144,9,0,0,208,9,0,0,16,10,0,65,204,20,11,1,44,0,65,216,20,11,21,10,0,0,0,16,0,0,0,48,10,0,0,48,10,0,0,28,0,0,0,7,0,65,252,20,11,1,60,0,65,140,21,11,34,30,0,0,0,0,0,156,255,179,254,207,254,205,253,74,252,36,250,0,0,0,0,100,0,77,1,49,1,51,2,182,3,220,5,0,65,188,21,11,1,44,0,65,200,21,11,21,13,0,0,0,16,0,0,0,144,10,0,0,144,10,0,0,30,0,0,0,15,0,65,236,21,11,1,60,0,65,252,21,11,34,30,0,0,0,0,0,100,0,77,1,49,1,51,2,182,3,220,5,0,0,0,0,100,0,77,1,49,1,51,2,182,3,220,5,0,65,172,22,11,1,44,0,65,184,22,11,21,13,0,0,0,16,0,0,0,0,11,0,0,0,11,0,0,30,0,0,0,15,0,65,220,22,11,1,60,0,65,232,22,11,43,1,0,0,0,36,0,0,0,75,0,101,0,121,0,32,0,100,0,111,0,101,0,115,0,32,0,110,0,111,0,116,0,32,0,101,0,120,0,105,0,115,0,116,0,65,156,23,11,1,44,0,65,168,23,11,29,1,0,0,0,22,0,0,0,126,0,108,0,105,0,98,0,47,0,109,0,97,0,112,0,46,0,116,0,115,0,65,204,23,11,1,28,0,65,216,23,11,9,15,0,0,0,8,0,0,0,15,0,65,236,23,11,1,44,0,65,248,23,11,35,1,0,0,0,28,0,0,0,65,0,114,0,114,0,97,0,121,0,32,0,105,0,115,0,32,0,101,0,109,0,112,0,116,0,121,0,65,156,24,11,1,28,0,65,168,24,11,9,15,0,0,0,8,0,0,0,16,0,65,188,24,11,1,28,0,65,200,24,11,9,16,0,0,0,8,0,0,0,17,0,65,220,24,11,1,60,0,65,232,24,11,45,1,0,0,0,38,0,0,0,126,0,108,0,105,0,98,0,47,0,97,0,114,0,114,0,97,0,121,0,98,0,117,0,102,0,102,0,101,0,114,0,46,0,116,0,115,0,65,156,25,11,1,28,0,65,188,25,11,1,28,0,65,220,25,11,1,124,0,65,232,25,11,101,1,0,0,0,94,0,0,0,69,0,108,0,101,0,109,0,101,0,110,0,116,0,32,0,116,0,121,0,112,0,101,0,32,0,109,0,117,0,115,0,116,0,32,0,98,0,101,0,32,0,110,0,117,0,108,0,108,0,97,0,98,0,108,0,101,0,32,0,105,0,102,0,32,0,97,0,114,0,114,0,97,0,121,0,32,0,105,0,115,0,32,0,104,0,111,0,108,0,101,0,121,0,65,220,26,11,1,28,0,65,252,26,11,1,140,0,65,136,27,11,131,1,1,0,0,0,124,0,0,0,83,0,111,0,109,0,116,0,104,0,105,0,110,0,103,0,39,0,115,0,32,0,119,0,114,0,111,0,110,0,103,0,44,0,32,0,105,0,108,0,108,0,101,0,103,0,97,0,108,0,32,0,98,0,111,0,97,0,114,0,100,0,32,0,119,0,104,0,105,0,108,0,101,0,32,0,117,0,115,0,105,0,110,0,103,0,32,0,103,0,101,0,110,0,101,0,114,0,97,0,116,0,101,0,76,0,101,0,103,0,97,0,108,0,77,0,111,0,118,0,101,0,115,0,65,140,28,11,1,28,0,65,172,28,11,1,28,0,65,188,28,11,8,8,0,0,0,0,0,128,63,0,65,204,28,11,1,28,0,65,236,28,11,1,28,0,65,140,29,11,1,28,0,65,156,29,11,8,8,0,0,0,0,0,128,63,0,65,172,29,11,1,28,0,65,204,29,11,1,28,0,65,236,29,11,1,28,0,65,252,29,11,8,8,0,0,0,0,0,128,63,0,65,140,30,11,1,60,0,65,152,30,11,49,1,0,0,0,42,0,0,0,79,0,98,0,106,0,101,0,99,0,116,0,32,0,97,0,108,0,114,0,101,0,97,0,100,0,121,0,32,0,112,0,105,0,110,0,110,0,101,0,100,0,65,204,30,11,1,60,0,65,216,30,11,47,1,0,0,0,40,0,0,0,79,0,98,0,106,0,101,0,99,0,116,0,32,0,105,0,115,0,32,0,110,0,111,0,116,0,32,0,112,0,105,0,110,0,110,0,101,0,100,0,65,144,31,11,13,18,0,0,0,32,0,0,0,0,0,0,0,32,0,65,172,31,11,26,65,0,0,0,2,0,0,0,130,0,0,0,0,0,0,0,2,65,0,0,0,0,0,0,2,9,0,65,220,31,11,10,66,0,0,0,0,0,0,0,2,65,0,65,252,31,11,10,130,8,0,0,0,0,0,0,16,193,0,65,156,32,11,2,2,25,0,38,16,115,111,117,114,99,101,77,97,112,112,105,110,103,85,82,76,20,46,47,111,112,116,105,109,105,122,101,100,46,119,97,115,109,46,109,97,112,]);// This file will not run on it's own\n\nconst {\n  Module,\n  instantiate,\n  Memory,\n  Table\n} = WebAssembly;\n\nconst WebAssemblyModule = function(deps = {\n  'global': {},\n  'env': {\n    'memory': new Memory({initial: 10, limit: 100}),\n    'table': new Table({initial: 0, element: 'anyfunc'})\n  }\n}) {\n  return instantiate(buffer, deps);\n}\n\nmodule.exports = WebAssemblyModule;\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/build/optimized.wasm?");

/***/ }),

/***/ "./src/aiClient/workers/aiClient.worker.js":
/*!*************************************************!*\
  !*** ./src/aiClient/workers/aiClient.worker.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Worker_fn)\n/* harmony export */ });\nfunction Worker_fn() {\n  return new Worker(__webpack_require__.p + \"aiClient.worker.js\");\n}\n\n\n//# sourceURL=webpack://chss-service-workers/./src/aiClient/workers/aiClient.worker.js?");

/***/ }),

/***/ "./src/aiClient/workers/createWorkers.js":
/*!***********************************************!*\
  !*** ./src/aiClient/workers/createWorkers.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createWorker\": () => (/* binding */ createWorker)\n/* harmony export */ });\n/* harmony import */ var _aiClient_worker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aiClient.worker.js */ \"./src/aiClient/workers/aiClient.worker.js\");\n\nconst createWorker = () => new _aiClient_worker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n\n//# sourceURL=webpack://chss-service-workers/./src/aiClient/workers/createWorkers.js?");

/***/ }),

/***/ "./src/helpers/asciiSpinner.js":
/*!*************************************!*\
  !*** ./src/helpers/asciiSpinner.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"nextSpinnerChar\": () => (/* binding */ nextSpinnerChar),\n/* harmony export */   \"getNextSpinnerChar\": () => (/* binding */ getNextSpinnerChar)\n/* harmony export */ });\nconst nextSpinnerChar = {\n  '/': '-',\n  '-': '\\\\',\n  '\\\\': '|',\n  '|': '/',\n};\n\nconst getNextSpinnerChar = (char) => {\n  return nextSpinnerChar[char] || ''; //as string;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/./src/helpers/asciiSpinner.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/evaluators/evaluateBoard_new.js":
/*!****************************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/evaluators/evaluateBoard_new.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateBoard\": () => (/* binding */ evaluateBoard)\n/* harmony export */ });\n/* harmony import */ var _moveGenerators_getHitMovesNoPromotion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../moveGenerators/getHitMovesNoPromotion.js */ \"../chss-module-engine/src/engine_new/moveGenerators/getHitMovesNoPromotion.js\");\n/* harmony import */ var _utils_getDefenderValues_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getDefenderValues.js */ \"../chss-module-engine/src/engine_new/utils/getDefenderValues.js\");\n/* harmony import */ var _utils_pieceValues_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/pieceValues.js */ \"../chss-module-engine/src/engine_new/utils/pieceValues.js\");\n\n\n\n\nconst evaluateBoard = (board) => {\n  let pieceBalance = 0;\n  const attackMap = [];\n  const defendMap = [];\n\n  const kingCell = board.indexOf(6 + ((board[64] ^ 1) << 3));\n\n  let hitCells;\n\n  for (let index = 0; index <= 63; index += 1) {\n    if (board[index] === 0) continue;\n\n    pieceBalance += _utils_pieceValues_js__WEBPACK_IMPORTED_MODULE_2__.pieceValues[board[index]];\n\n    if (board[index] >>> 3 === board[64]) {\n      // piece is color to move, can be attacker\n\n      hitCells = (0,_moveGenerators_getHitMovesNoPromotion_js__WEBPACK_IMPORTED_MODULE_0__.getHitMovesNoPromotion)(board, index);\n      if (hitCells.includes(kingCell)) throw false; // king can be hit, board is illegal\n\n      for (const tc of hitCells) {\n        attackMap[tc] = (attackMap[tc] || []).concat(_utils_pieceValues_js__WEBPACK_IMPORTED_MODULE_2__.positivePieceValues[board[index] & 7]);\n        if (!defendMap[tc]) defendMap[tc] = (0,_utils_getDefenderValues_js__WEBPACK_IMPORTED_MODULE_1__.getDefenderValues)(board, tc, board[64]);\n      }\n    }\n  }\n\n  let hitScore = 0;\n\n  cellLoop: for (let index of Object.keys(attackMap)) {\n    let thisCellValue = 0;\n    let weakestProtector;\n    let weakestAttacker;\n    let hasMoreAttackers;\n    let hasMoreProtectors;\n    if (defendMap[index].length === 0) {\n      // cell has no protector\n      // this cell can be hit, add value and check next cell\n      const thisHitScore = _utils_pieceValues_js__WEBPACK_IMPORTED_MODULE_2__.positivePieceValues[board[index]];\n      // allHitScore += thisHitScore;\n      hitScore = Math.max(hitScore, thisHitScore);\n\n      continue cellLoop;\n    }\n    // cell has protector\n\n    thisCellValue += _utils_pieceValues_js__WEBPACK_IMPORTED_MODULE_2__.positivePieceValues[board[index]]; // add cell value\n\n    attackMap[index].sort((a, b) => b - a); // weakest attacker to the end;\n    weakestAttacker = attackMap[index].pop();\n\n    defendMap[index].sort((a, b) => b - a); // weakest protector to the end;\n    weakestProtector = defendMap[index].pop();\n\n    hasMoreAttackers = attackMap[index].length !== 0;\n    if (\n      hasMoreAttackers &&\n      weakestAttacker < weakestProtector // the protector worth more than the 1st attacker used\n    ) {\n      // break here, protector will not be used, doesn't worth it\n      // allHitScore += thisCellValue;\n      hitScore = Math.max(hitScore, thisCellValue);\n\n      continue cellLoop;\n    }\n    // weakest attacker will be hit\n\n    thisCellValue -= weakestAttacker; // deduct weakest attacker\n\n    if (!hasMoreAttackers) {\n      // no more attackers\n      if (thisCellValue > 0) {\n        // allHitScore += thisCellValue;\n        hitScore = Math.max(hitScore, thisCellValue);\n      } //hitScore += thisCellValue; // add cellvalue if worth to hit\n      continue cellLoop;\n    }\n    // there are more attackers\n\n    weakestAttacker = attackMap[index].pop(); // second weakest\n    hasMoreProtectors = defendMap[index].length !== 0;\n    while (true) {\n      if (hasMoreProtectors && weakestProtector < weakestAttacker) {\n        // break here, attacker will not be used, doesn't worth it\n        if (thisCellValue > 0) {\n          // add cellvalue if worth to hit\n          // // allHitScore += thisCellValue;\n          hitScore = Math.max(hitScore, thisCellValue);\n        }\n        continue cellLoop;\n      }\n      // weakest protector will be hit\n\n      thisCellValue += weakestProtector; // add weakest protector value\n\n      // while (true) {\n      if (!hasMoreProtectors) {\n        // no more protectors\n        if (thisCellValue > 0) {\n          // add cellvalue if worth to hit\n          // // allHitScore += thisCellValue;\n          hitScore = Math.max(hitScore, thisCellValue);\n        }\n        continue cellLoop;\n      }\n      // there are more protectors\n\n      weakestProtector = defendMap[index].pop();\n      hasMoreAttackers = attackMap[index].length !== 0;\n\n      if (hasMoreAttackers && weakestAttacker < weakestProtector) {\n        // break here, attacker will not be used, doesn't worth it\n        if (thisCellValue > 0) {\n          // add cellvalue if worth to hit\n          // allHitScore += thisCellValue;\n          hitScore = Math.max(hitScore, thisCellValue);\n        }\n        continue cellLoop;\n      }\n      // weakest attacker will be hit\n\n      thisCellValue -= weakestAttacker;\n\n      if (!hasMoreAttackers) {\n        // no more attackers\n        if (thisCellValue > 0) {\n          // add cellvalue if worth to hit\n          // allHitScore += thisCellValue;\n          hitScore = Math.max(hitScore, thisCellValue);\n        }\n        continue cellLoop;\n      }\n      // there are more attackers\n\n      weakestAttacker = attackMap[index].pop();\n      hasMoreProtectors = defendMap[index].length !== 0;\n    }\n  }\n\n  // console.log({ pieceBalance, hitScore });\n  return board[64] === 1 ? pieceBalance + hitScore : pieceBalance - hitScore; // << 8;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/evaluators/evaluateBoard_new.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/moveGenerators/getBishopHitMoves.js":
/*!********************************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/moveGenerators/getBishopHitMoves.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getBishopHitMoves\": () => (/* binding */ getBishopHitMoves)\n/* harmony export */ });\nconst getBishopHitMoves = (position, board, color) => {\n  const targets = [];\n\n  const maxMovesUp = position >>> 3;   // equals to rank\n  const maxMovesLeft = position & 7;  // equals to file\n  const maxMovesDown = 7 - maxMovesUp;\n  const maxMovesRight = 7 - maxMovesLeft;\n\n  const lastCellUpLeft = position - Math.min(maxMovesUp, maxMovesLeft) * 9;\n  for (let cellIndex = position - 9; cellIndex >= lastCellUpLeft; cellIndex -= 9) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellUpRight = position - Math.min(maxMovesUp, maxMovesRight) * 7;\n  for (let cellIndex = position - 7; cellIndex >= lastCellUpRight; cellIndex -= 7) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellDownLeft = position + Math.min(maxMovesDown, maxMovesLeft) * 7;\n  for (let cellIndex = position + 7; cellIndex <= lastCellDownLeft; cellIndex += 7) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellDownRight = position + Math.min(maxMovesDown, maxMovesRight) * 9;\n  for (let cellIndex = position + 9; cellIndex <= lastCellDownRight; cellIndex += 9) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  return targets;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/moveGenerators/getBishopHitMoves.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/moveGenerators/getHitMovesNoPromotion.js":
/*!*************************************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/moveGenerators/getHitMovesNoPromotion.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getHitMovesNoPromotion\": () => (/* binding */ getHitMovesNoPromotion)\n/* harmony export */ });\n/* harmony import */ var _getBishopHitMoves_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBishopHitMoves.js */ \"../chss-module-engine/src/engine_new/moveGenerators/getBishopHitMoves.js\");\n/* harmony import */ var _getKingHitMoves_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getKingHitMoves.js */ \"../chss-module-engine/src/engine_new/moveGenerators/getKingHitMoves.js\");\n/* harmony import */ var _getKnightHitMoves_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getKnightHitMoves.js */ \"../chss-module-engine/src/engine_new/moveGenerators/getKnightHitMoves.js\");\n/* harmony import */ var _getPawnHitMovesNoPromotion_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getPawnHitMovesNoPromotion.js */ \"../chss-module-engine/src/engine_new/moveGenerators/getPawnHitMovesNoPromotion.js\");\n/* harmony import */ var _getQueenHitMoves_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getQueenHitMoves.js */ \"../chss-module-engine/src/engine_new/moveGenerators/getQueenHitMoves.js\");\n/* harmony import */ var _getRookHitMoves_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getRookHitMoves.js */ \"../chss-module-engine/src/engine_new/moveGenerators/getRookHitMoves.js\");\n\n\n\n\n\n\n\nconst moveGenerators = [\n  null,\n  _getPawnHitMovesNoPromotion_js__WEBPACK_IMPORTED_MODULE_3__.getPawnHitMovesNoPromotion,\n  _getBishopHitMoves_js__WEBPACK_IMPORTED_MODULE_0__.getBishopHitMoves,\n  _getKnightHitMoves_js__WEBPACK_IMPORTED_MODULE_2__.getKnightHitMoves,\n  _getRookHitMoves_js__WEBPACK_IMPORTED_MODULE_5__.getRookHitMoves,\n  _getQueenHitMoves_js__WEBPACK_IMPORTED_MODULE_4__.getQueenHitMoves,\n  _getKingHitMoves_js__WEBPACK_IMPORTED_MODULE_1__.getKingHitMoves,\n];\n\nconst getHitMovesNoPromotion = (board, cellIndex) => {\n  return moveGenerators[board[cellIndex] & 7](cellIndex, board, board[64]);\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/moveGenerators/getHitMovesNoPromotion.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/moveGenerators/getKingHitMoves.js":
/*!******************************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/moveGenerators/getKingHitMoves.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getKingHitMoves\": () => (/* binding */ getKingHitMoves)\n/* harmony export */ });\nconst getKingHitMoves = (position, board) => {\n  const targets = [];\n\n  const color = board[position] >>> 3;\n  const rank = position >>> 3;   // equals to rank\n  const file = position & 7;  // equals to file\n\n  const canGoUp = rank > 0;\n  const canGoDown = rank < 7;\n  const canGoLeft = file > 0;\n  const canGoRight = file < 7;\n  \n\n  if (canGoUp) {\n    const targetUp = position - 8;\n    if (board[targetUp] !== 0 && (board[targetUp] >>> 3) !== color) targets[targets.length] = targetUp;\n\n    if (canGoLeft) {\n      const targetUpLeft = position - 9;\n      if (board[targetUpLeft] !== 0 && (board[targetUpLeft] >>> 3) !== color) targets[targets.length] = targetUpLeft;\n      \n    }\n\n    if (canGoRight) {\n      const targetUpRight = position - 7;\n      if (board[targetUpRight] !== 0 && (board[targetUpRight] >>> 3) !== color) targets[targets.length] = targetUpRight;\n    }\n  }\n  \n  if (canGoDown) {\n    const targetDown = position + 8;\n    if (board[targetDown] !== 0 && (board[targetDown] >>> 3) !== color) targets[targets.length] = targetDown;\n\n    if (canGoLeft) {\n      const targetDownLeft = position + 7;\n      if (board[targetDownLeft] !== 0 && (board[targetDownLeft] >>> 3) !== color) targets[targets.length] = targetDownLeft;\n      \n    }\n\n    if (canGoRight) {\n      const targetDownRight = position + 9;\n      if (board[targetDownRight] !== 0 && (board[targetDownRight] >>> 3) !== color) targets[targets.length] = targetDownRight;\n    }\n  }\n\n  if (canGoLeft) {\n    const targetLeft = position - 1;\n    if (board[targetLeft] !== 0 && (board[targetLeft] >>> 3) !== color) targets[targets.length] = targetLeft;\n  }\n\n  if (canGoRight) {\n    const targetRight = position + 1;\n    if (board[targetRight] !== 0 && (board[targetRight] >>> 3) !== color) targets[targets.length] = targetRight;\n  }\n  \n  return targets;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/moveGenerators/getKingHitMoves.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/moveGenerators/getKnightHitMoves.js":
/*!********************************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/moveGenerators/getKnightHitMoves.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getKnightHitMoves\": () => (/* binding */ getKnightHitMoves)\n/* harmony export */ });\nconst getKnightHitMoves = (position, board, color) => {\n  const targets = [];\n\n  const rank = position >>> 3;\n  const file = position & 7;\n\n  const canGo2Left = file > 1;\n  const canGoLeft = canGo2Left || file > 0;\n  const canGo2Right = file < 6;\n  const canGoRight = canGo2Right || file < 7;\n  const canGo2Up = rank > 1;\n  const canGoUp = canGo2Up || rank > 0;\n  const canGo2Down = rank < 6;\n  const canGoDown = canGo2Down || rank < 7;\n  \n  if (canGo2Up) {\n    if (canGoLeft) {\n      const target = position - 17;\n      if (board[target] !== 0 && (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n\n    if (canGoRight) {\n      const target = position - 15;\n      if (board[target] !== 0 && (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n  }\n\n  if (canGo2Down) {\n    if (canGoLeft) {\n      const target = position + 15;\n      if (board[target] !== 0 && (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n\n    if (canGoRight) {\n      const target = position + 17;\n      if (board[target] !== 0 && (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n  }\n  \n  if (canGo2Left) {\n    if (canGoUp) {\n      const target = position - 10;\n      if (board[target] !== 0 && (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n\n    if (canGoDown) {\n      const target = position + 6;\n      if (board[target] !== 0 && (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n  }\n\n  if (canGo2Right) {\n    if (canGoUp) {\n      const target = position - 6;\n      if (board[target] !== 0 && (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n\n    if (canGoDown) {\n      const target = position + 10;\n      if (board[target] !== 0 && (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n  }\n\n  return targets;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/moveGenerators/getKnightHitMoves.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/moveGenerators/getKnightMoves.js":
/*!*****************************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/moveGenerators/getKnightMoves.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getKnightMoves\": () => (/* binding */ getKnightMoves)\n/* harmony export */ });\nconst getKnightMoves = (position, board, color) => {\n  const targets = [];\n\n  const rank = position >>> 3;\n  const file = position & 7;\n\n  const canGo2Left = file > 1;\n  const canGoLeft = canGo2Left || file > 0;\n  const canGo2Right = file < 6;\n  const canGoRight = canGo2Right || file < 7;\n  const canGo2Up = rank > 1;\n  const canGoUp = canGo2Up || rank > 0;\n  const canGo2Down = rank < 6;\n  const canGoDown = canGo2Down || rank < 7;\n  \n  if (canGo2Up) {\n    if (canGoLeft) {\n      const target = position - 17;\n      if (board[target] === 0 || (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n\n    if (canGoRight) {\n      const target = position - 15;\n      if (board[target] === 0 || (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n  }\n\n  if (canGo2Down) {\n    if (canGoLeft) {\n      const target = position + 15;\n      if (board[target] === 0 || (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n\n    if (canGoRight) {\n      const target = position + 17;\n      if (board[target] === 0 || (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n  }\n  \n  if (canGo2Left) {\n    if (canGoUp) {\n      const target = position - 10;\n      if (board[target] === 0 || (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n\n    if (canGoDown) {\n      const target = position + 6;\n      if (board[target] === 0 || (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n  }\n\n  if (canGo2Right) {\n    if (canGoUp) {\n      const target = position - 6;\n      if (board[target] === 0 || (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n\n    if (canGoDown) {\n      const target = position + 10;\n      if (board[target] === 0 || (board[target] >>> 3) !== color) targets[targets.length] = target;\n    }\n  }\n\n  return targets;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/moveGenerators/getKnightMoves.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/moveGenerators/getPawnHitMovesNoPromotion.js":
/*!*****************************************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/moveGenerators/getPawnHitMovesNoPromotion.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getPawnHitMovesNoPromotion\": () => (/* binding */ getPawnHitMovesNoPromotion)\n/* harmony export */ });\nconst getPawnHitMovesNoPromotion = (position, board, isWhite) => {\n  const targets = [];\n\n  const rank = position >>> 3;\n  const file = position & 7;\n  const canHitRight = file < 7;\n  const canHitLeft = file > 0;\n\n  if (isWhite) {\n    if (canHitRight) {\n      const rightHitTarget = position - 7;\n      if (board[rightHitTarget] === 0) {\n        if (rank === 3 && board[66] === rightHitTarget) targets[targets.length] = rightHitTarget; // en passant\n      } else if (board[rightHitTarget] >>> 3 === 0) {\n        targets[targets.length] = rightHitTarget; // target is black piece\n      }\n    }\n\n    if (canHitLeft) {\n      const leftHitTarget = position - 9;\n      if (board[leftHitTarget] === 0) {\n        // target is empty\n        if (rank === 3 && board[66] === leftHitTarget) targets[targets.length] = leftHitTarget; // en passant\n      } else if (board[leftHitTarget] >>> 3 === 0) {\n        targets[targets.length] = leftHitTarget;\n      }\n    }\n\n    return targets;\n  }\n\n  if (canHitRight) {\n    const rightHitTarget = position + 9;\n    if (board[rightHitTarget] === 0) {\n      // target is empty\n      if (rank === 4 && board[66] === rightHitTarget) targets[targets.length] = rightHitTarget; // en passant\n    } else if (board[rightHitTarget] >>> 3 === 1) {\n      targets[targets.length] = rightHitTarget; // white target\n    }\n  }\n\n  if (canHitLeft) {\n    const leftHitTarget = position + 7;\n    if (board[leftHitTarget] === 0) {\n      if (rank === 4 && board[66] === leftHitTarget) targets[targets.length] = leftHitTarget; // en passant\n    } else if (board[leftHitTarget] >>> 3 === 1) {\n      targets[targets.length] = leftHitTarget;\n    }\n  }\n\n  return targets;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/moveGenerators/getPawnHitMovesNoPromotion.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/moveGenerators/getQueenHitMoves.js":
/*!*******************************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/moveGenerators/getQueenHitMoves.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getQueenHitMoves\": () => (/* binding */ getQueenHitMoves)\n/* harmony export */ });\nconst getQueenHitMoves = (position, board, color) => {\n  const targets = [];\n\n  const maxMovesUp = position >>> 3;   // equals to rank\n  const maxMovesLeft = position & 7;  // equals to file\n  const maxMovesDown = 7 - maxMovesUp;\n  const maxMovesRight = 7 - maxMovesLeft;\n\n  const lastCellUpLeft = position - Math.min(maxMovesUp, maxMovesLeft) * 9;\n  for (let cellIndex = position - 9; cellIndex >= lastCellUpLeft; cellIndex -= 9) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellUpRight = position - Math.min(maxMovesUp, maxMovesRight) * 7;\n  for (let cellIndex = position - 7; cellIndex >= lastCellUpRight; cellIndex -= 7) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellDownLeft = position + Math.min(maxMovesDown, maxMovesLeft) * 7;\n  for (let cellIndex = position + 7; cellIndex <= lastCellDownLeft; cellIndex += 7) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellDownRight = position + Math.min(maxMovesDown, maxMovesRight) * 9;\n  for (let cellIndex = position + 9; cellIndex <= lastCellDownRight; cellIndex += 9) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellUp = position - maxMovesUp * 8;\n  for (let cellIndex = position - 8; cellIndex >= lastCellUp; cellIndex -= 8) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellRight = position + maxMovesRight;\n  for (let cellIndex = position + 1; cellIndex <= lastCellRight; cellIndex += 1) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellDown = position + maxMovesDown * 8;\n  for (let cellIndex = position + 8; cellIndex <= lastCellDown; cellIndex += 8) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellLeft = position - maxMovesLeft;\n  for (let cellIndex = position - 1; cellIndex >= lastCellLeft; cellIndex -= 1) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  return targets;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/moveGenerators/getQueenHitMoves.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/moveGenerators/getRookHitMoves.js":
/*!******************************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/moveGenerators/getRookHitMoves.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getRookHitMoves\": () => (/* binding */ getRookHitMoves)\n/* harmony export */ });\nconst getRookHitMoves = (position, board, color) => {\n  const targets = [];\n\n  const maxMovesUp = position >>> 3;   // equals to rank\n  const maxMovesLeft = position & 7;  // equals to file\n  const maxMovesDown = 7 - maxMovesUp;\n  const maxMovesRight = 7 - maxMovesLeft;\n\n  const lastCellUp = position - maxMovesUp * 8;\n  for (let cellIndex = position - 8; cellIndex >= lastCellUp; cellIndex -= 8) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellRight = position + maxMovesRight;\n  for (let cellIndex = position + 1; cellIndex <= lastCellRight; cellIndex += 1) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellDown = position + maxMovesDown * 8;\n  for (let cellIndex = position + 8; cellIndex <= lastCellDown; cellIndex += 8) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  const lastCellLeft = position - maxMovesLeft;\n  for (let cellIndex = position - 1; cellIndex >= lastCellLeft; cellIndex -= 1) {\n    if (board[cellIndex] === 0) { // empty cell\n      continue;\n    }\n\n    if ((board[cellIndex] >>> 3) !== color) targets[targets.length] = cellIndex; // opponent's piece\n    break;\n  }\n\n  return targets;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/moveGenerators/getRookHitMoves.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/utils/getDefenderValues.js":
/*!***********************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/utils/getDefenderValues.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getDefenderValues\": () => (/* binding */ getDefenderValues)\n/* harmony export */ });\n/* harmony import */ var _moveGenerators_getKnightMoves_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../moveGenerators/getKnightMoves.js */ \"../chss-module-engine/src/engine_new/moveGenerators/getKnightMoves.js\");\n\n\nconst getDefenderValues = (board, cellIndex, color) => {\n  const defenderValues = [];\n  const rank = cellIndex >>> 3;\n\n  // check if attacked by pawn\n  if (color === 0) {\n    if (rank < 6) {\n      if (board[cellIndex + 7] === 9) defenderValues[defenderValues.length] = 1;\n      if (board[cellIndex + 9] === 9) defenderValues[defenderValues.length] = 1;\n    }\n  } else {\n    if (rank > 1) {\n      if (board[cellIndex - 7] === 1) defenderValues[defenderValues.length] = 1;\n      if (board[cellIndex - 9] === 1) defenderValues[defenderValues.length] = 1;\n    }\n  }\n\n  // check if captured by knight\n  const lookForKnightOn = (0,_moveGenerators_getKnightMoves_js__WEBPACK_IMPORTED_MODULE_0__.getKnightMoves)(cellIndex, board, color);\n  for (const cellToCheckKnightFor of lookForKnightOn)\n    if ((board[cellToCheckKnightFor] & 7) === 3) defenderValues[defenderValues.length] = 3;\n\n  // check for bishop, rook, or king\n  // rank is used instead of maxMovesUp\n  const maxMovesLeft = cellIndex & 7; // equals to file\n  const maxMovesDown = 7 - rank;\n  const maxMovesRight = 7 - maxMovesLeft;\n\n  const defendingColorPrefix = (color ^ 1) << 3;\n  const defendingBishop = defendingColorPrefix + 2;\n  const defendingRook = defendingColorPrefix + 4;\n  const defendingQueen = defendingColorPrefix + 5;\n  const defendingKing = defendingColorPrefix + 6;\n\n  const lastCellUpLeft = cellIndex - Math.min(rank, maxMovesLeft) * 9;\n  for (let currentCellIndex = cellIndex - 9; currentCellIndex >= lastCellUpLeft; currentCellIndex -= 9) {\n    if (board[currentCellIndex] === 0) continue; // empty cell\n    if (board[currentCellIndex] === defendingBishop) defenderValues[defenderValues.length] = 3;\n    if (board[currentCellIndex] === defendingQueen) defenderValues[defenderValues.length] = 9;\n    if (board[currentCellIndex] === defendingKing && currentCellIndex === cellIndex - 9)\n      defenderValues[defenderValues.length] = 64;\n    break;\n  }\n\n  const lastCellUpRight = cellIndex - Math.min(rank, maxMovesRight) * 7;\n  for (let currentCellIndex = cellIndex - 7; currentCellIndex >= lastCellUpRight; currentCellIndex -= 7) {\n    if (board[currentCellIndex] === 0) continue; // empty cell\n    if (board[currentCellIndex] === defendingBishop) defenderValues[defenderValues.length] = 3;\n    if (board[currentCellIndex] === defendingQueen) defenderValues[defenderValues.length] = 9;\n    if (board[currentCellIndex] === defendingKing && currentCellIndex === cellIndex - 7)\n      defenderValues[defenderValues.length] = 64;\n    break;\n  }\n\n  const lastCellDownLeft = cellIndex + Math.min(maxMovesDown, maxMovesLeft) * 7;\n  for (let currentCellIndex = cellIndex + 7; currentCellIndex <= lastCellDownLeft; currentCellIndex += 7) {\n    if (board[currentCellIndex] === 0) continue; // empty cell\n    if (board[currentCellIndex] === defendingBishop) defenderValues[defenderValues.length] = 3;\n    if (board[currentCellIndex] === defendingQueen) defenderValues[defenderValues.length] = 9;\n    if (board[currentCellIndex] === defendingKing && currentCellIndex === cellIndex + 7)\n      defenderValues[defenderValues.length] = 64;\n    break;\n  }\n\n  const lastCellDownRight = cellIndex + Math.min(maxMovesDown, maxMovesRight) * 9;\n  for (let currentCellIndex = cellIndex + 9; currentCellIndex <= lastCellDownRight; currentCellIndex += 9) {\n    if (board[currentCellIndex] === 0) continue; // empty cell\n    if (board[currentCellIndex] === defendingBishop) defenderValues[defenderValues.length] = 3;\n    if (board[currentCellIndex] === defendingQueen) defenderValues[defenderValues.length] = 9;\n    if (board[currentCellIndex] === defendingKing && currentCellIndex === cellIndex + 9)\n      defenderValues[defenderValues.length] = 64;\n    break;\n  }\n\n  const lastCellUp = cellIndex - rank * 8;\n  for (let currentCellIndex = cellIndex - 8; currentCellIndex >= lastCellUp; currentCellIndex -= 8) {\n    if (board[currentCellIndex] === 0) continue; // empty cell\n    if (board[currentCellIndex] === defendingRook) defenderValues[defenderValues.length] = 5;\n    if (board[currentCellIndex] === defendingQueen) defenderValues[defenderValues.length] = 9;\n    if (board[currentCellIndex] === defendingKing && currentCellIndex === cellIndex - 8)\n      defenderValues[defenderValues.length] = 64;\n    break;\n  }\n\n  const lastCellRight = cellIndex + maxMovesRight;\n  for (let currentCellIndex = cellIndex + 1; currentCellIndex <= lastCellRight; currentCellIndex += 1) {\n    if (board[currentCellIndex] === 0) continue; // empty cell\n    if (board[currentCellIndex] === defendingRook) defenderValues[defenderValues.length] = 5;\n    if (board[currentCellIndex] === defendingQueen) defenderValues[defenderValues.length] = 9;\n    if (board[currentCellIndex] === defendingKing && currentCellIndex === cellIndex + 1)\n      defenderValues[defenderValues.length] = 64;\n    break;\n  }\n\n  const lastCellDown = cellIndex + maxMovesDown * 8;\n  for (let currentCellIndex = cellIndex + 8; currentCellIndex <= lastCellDown; currentCellIndex += 8) {\n    if (board[currentCellIndex] === 0) continue; // empty cell\n    if (board[currentCellIndex] === defendingRook) defenderValues[defenderValues.length] = 5;\n    if (board[currentCellIndex] === defendingQueen) defenderValues[defenderValues.length] = 9;\n    if (board[currentCellIndex] === defendingKing && currentCellIndex === cellIndex + 8)\n      defenderValues[defenderValues.length] = 64;\n    break;\n  }\n\n  const lastCellLeft = cellIndex - maxMovesLeft;\n  for (let currentCellIndex = cellIndex - 1; currentCellIndex >= lastCellLeft; currentCellIndex -= 1) {\n    if (board[currentCellIndex] === 0) continue; // empty cell\n    if (board[currentCellIndex] === defendingRook) defenderValues[defenderValues.length] = 5;\n    if (board[currentCellIndex] === defendingQueen) defenderValues[defenderValues.length] = 9;\n    if (board[currentCellIndex] === defendingKing && currentCellIndex === cellIndex - 1)\n      defenderValues[defenderValues.length] = 64;\n    break;\n  }\n\n  return defenderValues;\n};\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/utils/getDefenderValues.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/utils/pieceValues.js":
/*!*****************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/utils/pieceValues.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"pieceCharValues\": () => (/* binding */ pieceCharValues),\n/* harmony export */   \"pieceValues\": () => (/* binding */ pieceValues),\n/* harmony export */   \"positivePieceValues\": () => (/* binding */ positivePieceValues)\n/* harmony export */ });\n// alphazero's valuation https://arxiv.org/pdf/2009.04374.pdf\nconst pieceCharValues = {\n  p: -1,\n  b: -3.33,\n  n: -3.05,\n  r: -5.63,\n  q: -9.5,\n  P: 1,\n  B: 3.33,\n  N: 3.05,\n  R: 5.63,\n  Q: 9.5,\n};\n\n// 15 for king val, should not be used, won't get hit\nconst pieceValues = [0, -1, -3.33, -3.05, -5.63, -9.5, -15, 0, 0, 1, 3.33, 3.05, 5.63, 9.5, 15];\n\nconst positivePieceValues = pieceValues.map(Math.abs);\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/utils/pieceValues.js?");

/***/ }),

/***/ "../chss-module-engine/src/engine_new/utils/wasmEngine.js":
/*!****************************************************************!*\
  !*** ../chss-module-engine/src/engine_new/utils/wasmEngine.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getWasmEngine\": () => (/* binding */ getWasmEngine)\n/* harmony export */ });\n/* harmony import */ var _build_optimized_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../build/optimized.wasm */ \"../chss-module-engine/build/optimized.wasm\");\n\n\nlet _wasmEngine;\nconst wasmEngineAwaiters = [];\n\nconst transformEngine = ({\n  __new,\n  __pin,\n  __unpin,\n  __setArgumentsLength,\n  getMovedBoard: getMovedBoardWasm,\n  minimax: minimaxWasm,\n  evaluateBoard: evaluateBoardWasm,\n  memory,\n}) => {\n  function __liftArray(liftElement, align, pointer) {\n    if (!pointer) return null;\n    const memoryU32 = new Uint32Array(memory.buffer),\n      dataStart = memoryU32[(pointer + 4) >>> 2],\n      length = memoryU32[(pointer + 12) >>> 2],\n      values = new Array(length);\n    for (let i = 0; i < length; ++i) values[i] = liftElement(dataStart + ((i << align) >>> 0));\n    return values;\n  }\n  function __liftTypedArray(constructor, pointer) {\n    if (!pointer) return null;\n    const memoryU32 = new Uint32Array(memory.buffer);\n    return new constructor(\n      memory.buffer,\n      memoryU32[(pointer + 4) >>> 2],\n      memoryU32[(pointer + 8) >>> 2] / constructor.BYTES_PER_ELEMENT,\n    ).slice();\n  }\n  function __lowerTypedArray(constructor, id, align, values) {\n    if (values == null) return 0;\n    const length = values.length,\n      buffer = __pin(__new(length << align, 0)) >>> 0,\n      header = __new(12, id) >>> 0,\n      memoryU32 = new Uint32Array(memory.buffer);\n    memoryU32[(header + 0) >>> 2] = buffer;\n    memoryU32[(header + 4) >>> 2] = buffer;\n    memoryU32[(header + 8) >>> 2] = length << align;\n    new constructor(memory.buffer, buffer, length).set(values);\n    __unpin(buffer);\n    return header;\n  }\n\n  return {\n    getMovedBoard: (move, board) => {\n      return __liftTypedArray(Uint8Array, getMovedBoardWasm(move, __lowerTypedArray(Uint8Array, 3, 0, board)) >>> 0);\n    },\n    minimax(board, depth, alpha, beta, valueToAdd) {\n      __setArgumentsLength(arguments.length);\n      return __liftArray(\n        (pointer) => new Float32Array(memory.buffer)[pointer >>> 2],\n        2,\n        minimaxWasm(__lowerTypedArray(Uint8Array, 3, 0, board), depth, alpha, beta, valueToAdd) >>> 0,\n      );\n    },\n\n    evaluateBoard(board, valueToAdd) {\n      __setArgumentsLength(arguments.length);\n      return __liftArray(\n        (pointer) => new Float32Array(memory.buffer)[pointer >>> 2],\n        2,\n        evaluateBoardWasm(__lowerTypedArray(Uint8Array, 3, 0, board), valueToAdd) >>> 0,\n      );\n    },\n  };\n};\n\n_build_optimized_wasm__WEBPACK_IMPORTED_MODULE_0__({\n  global: self,\n  env: {\n    memory: new WebAssembly.Memory({ initial: 10, limit: 100 }),\n    table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' }),\n    abort: console.warn,\n  },\n}).then((wm) => {\n  const { instance } = wm;\n  console.log({ wm });\n  _wasmEngine = transformEngine(instance.exports);\n  while (wasmEngineAwaiters.length) wasmEngineAwaiters.pop()(_wasmEngine);\n});\n\nconst getWasmEngine = () =>\n  new Promise((r) => {\n    if (_wasmEngine) return r(_wasmEngine);\n    wasmEngineAwaiters.push(r);\n  });\n\n\n//# sourceURL=webpack://chss-service-workers/../chss-module-engine/src/engine_new/utils/wasmEngine.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/aiClient.ts");
/******/ 	
/******/ })()
;